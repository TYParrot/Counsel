<?xml version="1.0" encoding="utf-8"?>
<doc>
    <assembly>
        <name>Azure.Communication.Chat</name>
    </assembly>
    <members>
        <member name="T:Azure.Communication.Chat.ChatClient">
            <summary>
            The Azure Communication Services Chat client.
            </summary>
        </member>
        <member name="M:Azure.Communication.Chat.ChatClient.#ctor(System.Uri,Azure.Communication.CommunicationTokenCredential,Azure.Communication.Chat.ChatClientOptions)">
            <summary> Initializes a new instance of <see cref="T:Azure.Communication.Chat.ChatClient" />.</summary>
            <param name="endpoint">The uri for the Azure Communication Services Chat.</param>
            <param name="communicationTokenCredential">Instance of <see cref="T:Azure.Communication.CommunicationTokenCredential" />.</param>
            <param name="options">Chat client options exposing <see cref="P:Azure.Core.ClientOptions.Diagnostics" />, <see cref="P:Azure.Core.ClientOptions.Retry" />, <see cref="P:Azure.Core.ClientOptions.Transport" />, etc.</param>
        </member>
        <member name="M:Azure.Communication.Chat.ChatClient.#ctor">
            <summary>Initializes a new instance of <see cref="T:Azure.Communication.Chat.ChatClient" /> for mocking.</summary>
        </member>
        <member name="M:Azure.Communication.Chat.ChatClient.CreateChatThreadAsync(System.String,System.Collections.Generic.IEnumerable{Azure.Communication.Chat.ChatParticipant},System.String,System.Threading.CancellationToken)">
            <summary>Creates a ChatThreadClient asynchronously. <see cref="T:Azure.Communication.Chat.ChatThreadClient" />.</summary>
            <param name="topic">Topic for the chat thread</param>
            <param name="participants">Participants to be included in the chat thread</param>
            <param name="idempotencyToken"> If specified, the client directs that the request is repeatable; that is, that the client can make the request multiple times with the same Repeatability-Request-ID and get back an appropriate response without the server executing the request multiple times. The value of the Repeatability-Request-ID is an opaque string representing a client-generated, globally unique for all time, identifier for the request. It is recommended to use version 4 (random) UUIDs. </param>
            <param name="cancellationToken">The cancellation token for the task.</param>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        </member>
        <member name="M:Azure.Communication.Chat.ChatClient.CreateChatThread(System.String,System.Collections.Generic.IEnumerable{Azure.Communication.Chat.ChatParticipant},System.String,System.Threading.CancellationToken)">
            <summary>Creates a ChatThreadClient synchronously.<see cref="T:Azure.Communication.Chat.ChatThreadClient" />.</summary>
            <param name="topic">Topic for the chat thread</param>
            <param name="participants">Participants to be included in the chat thread</param>
            <param name="idempotencyToken"> If specified, the client directs that the request is repeatable; that is, that the client can make the request multiple times with the same Repeatability-Request-ID and get back an appropriate response without the server executing the request multiple times. The value of the Repeatability-Request-ID is an opaque string representing a client-generated, globally unique for all time, identifier for the request. It is recommended to use version 4 (random) UUIDs. </param>
            <param name="cancellationToken">The cancellation token for the task.</param>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        </member>
        <member name="M:Azure.Communication.Chat.ChatClient.GetChatThreadClient(System.String)">
            <summary> Initializes a new instance of ChatThreadClient. <see cref="T:Azure.Communication.Chat.ChatThreadClient" />.</summary>
            <param name="threadId"> The thread id for the ChatThreadClient instance. </param>
        </member>
        <member name="M:Azure.Communication.Chat.ChatClient.GetChatThreadsAsync(System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)">
            <summary> Gets the list of chat threads of a user<see cref="T:Azure.Communication.Chat.ChatThreadItem" /> asynchronously.</summary>
            <param name="startTime"> The earliest point in time to get chat threads up to. The timestamp should be in ISO8601 format: `yyyy-MM-ddTHH:mm:ssZ`. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        </member>
        <member name="M:Azure.Communication.Chat.ChatClient.GetChatThreads(System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)">
            <summary> Gets the list of chat threads of a user<see cref="T:Azure.Communication.Chat.ChatThreadItem" />.</summary>
            <param name="startTime"> The earliest point in time to get chat threads up to. The timestamp should be in ISO8601 format: `yyyy-MM-ddTHH:mm:ssZ`. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        </member>
        <member name="M:Azure.Communication.Chat.ChatClient.DeleteChatThreadAsync(System.String,System.Threading.CancellationToken)">
            <summary> Deletes a thread asynchronously. </summary>
            <param name="threadId"> Thread id to delete. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        </member>
        <member name="M:Azure.Communication.Chat.ChatClient.DeleteChatThread(System.String,System.Threading.CancellationToken)">
            <summary> Deletes a thread. </summary>
            <param name="threadId"> Thread id to delete. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        </member>
        <member name="T:Azure.Communication.Chat.ChatClientOptions">
            <summary>
            The options for communication <see cref="T:Azure.Communication.Chat.ChatClient" />.
            </summary>
        </member>
        <member name="F:Azure.Communication.Chat.ChatClientOptions.LatestVersion">
            <summary>
            The latest version of the Chat service.
            </summary>
        </member>
        <member name="M:Azure.Communication.Chat.ChatClientOptions.#ctor(Azure.Communication.Chat.ChatClientOptions.ServiceVersion)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Communication.Chat.ChatClientOptions" />.
            </summary>
        </member>
        <member name="T:Azure.Communication.Chat.ChatClientOptions.ServiceVersion">
            <summary>
            The Chat service version.
            </summary>
        </member>
        <member name="F:Azure.Communication.Chat.ChatClientOptions.ServiceVersion.V2021_03_07">
            <summary>
            The V1 of the Chat service.
            </summary>
        </member>
        <member name="F:Azure.Communication.Chat.ChatClientOptions.ServiceVersion.V2021_09_07">
            <summary>
            The V2021_09_07 of the Chat service.
            </summary>
        </member>
        <member name="F:Azure.Communication.Chat.ChatClientOptions.ServiceVersion.V2023_11_07">
            <summary>
            The V2023_11_07 of the Chat service.
            </summary>
        </member>
        <member name="F:Azure.Communication.Chat.ChatClientOptions.ServiceVersion.V2024_03_07">
            <summary>
            The V2024_03_07 of the Chat service.
            </summary>
        </member>
        <member name="M:Azure.Communication.Chat.ChatRestClient.CreateChatThreadAsync(System.String,System.String,System.Collections.Generic.IEnumerable{Azure.Communication.Chat.ChatParticipantInternal},System.Threading.CancellationToken)">
            <summary> Creates a chat thread. </summary>
            <param name="topic"> The chat thread topic. </param>
            <param name="repeatabilityRequestId"> If specified, the client directs that the request is repeatable; that is, that the client can make the request multiple times with the same Repeatability-Request-Id and get back an appropriate response without the server executing the request multiple times. The value of the Repeatability-Request-Id is an opaque string representing a client-generated, globally unique for all time, identifier for the request. It is recommended to use version 4 (random) UUIDs. </param>
            <param name="participants"> Participants to be added to the chat thread. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="topic" /> is null. </exception>
        </member>
        <member name="M:Azure.Communication.Chat.ChatRestClient.CreateChatThread(System.String,System.String,System.Collections.Generic.IEnumerable{Azure.Communication.Chat.ChatParticipantInternal},System.Threading.CancellationToken)">
            <summary> Creates a chat thread. </summary>
            <param name="topic"> The chat thread topic. </param>
            <param name="repeatabilityRequestId"> If specified, the client directs that the request is repeatable; that is, that the client can make the request multiple times with the same Repeatability-Request-Id and get back an appropriate response without the server executing the request multiple times. The value of the Repeatability-Request-Id is an opaque string representing a client-generated, globally unique for all time, identifier for the request. It is recommended to use version 4 (random) UUIDs. </param>
            <param name="participants"> Participants to be added to the chat thread. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="topic" /> is null. </exception>
        </member>
        <member name="P:Azure.Communication.Chat.ChatRestClient.ClientDiagnostics">
            <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        </member>
        <member name="M:Azure.Communication.Chat.ChatRestClient.#ctor(Azure.Core.Pipeline.ClientDiagnostics,Azure.Core.Pipeline.HttpPipeline,System.String,System.String)">
            <summary> Initializes a new instance of ChatRestClient. </summary>
            <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
            <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
            <param name="endpoint"> The endpoint of the Azure Communication resource. </param>
            <param name="apiVersion"> Api Version. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="clientDiagnostics" />, <paramref name="pipeline" />, <paramref name="endpoint" /> or <paramref name="apiVersion" /> is null. </exception>
        </member>
        <member name="M:Azure.Communication.Chat.ChatRestClient.ListChatThreadsAsync(System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)">
            <summary> Gets the list of chat threads of a user. </summary>
            <param name="maxPageSize"> The maximum number of chat threads returned per page. </param>
            <param name="startTime"> The earliest point in time to get chat threads up to. The timestamp should be in RFC3339 format: `yyyy-MM-ddTHH:mm:ssZ`. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.Communication.Chat.ChatRestClient.ListChatThreads(System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)">
            <summary> Gets the list of chat threads of a user. </summary>
            <param name="maxPageSize"> The maximum number of chat threads returned per page. </param>
            <param name="startTime"> The earliest point in time to get chat threads up to. The timestamp should be in RFC3339 format: `yyyy-MM-ddTHH:mm:ssZ`. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
        </member>
        <member name="M:Azure.Communication.Chat.ChatRestClient.DeleteChatThreadAsync(System.String,System.Threading.CancellationToken)">
            <summary> Deletes a thread. </summary>
            <param name="chatThreadId"> Id of the thread to be deleted. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="chatThreadId" /> is null. </exception>
        </member>
        <member name="M:Azure.Communication.Chat.ChatRestClient.DeleteChatThread(System.String,System.Threading.CancellationToken)">
            <summary> Deletes a thread. </summary>
            <param name="chatThreadId"> Id of the thread to be deleted. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="chatThreadId" /> is null. </exception>
        </member>
        <member name="M:Azure.Communication.Chat.ChatRestClient.ListChatThreadsNextPageAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)">
            <summary> Gets the list of chat threads of a user. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="maxPageSize"> The maximum number of chat threads returned per page. </param>
            <param name="startTime"> The earliest point in time to get chat threads up to. The timestamp should be in RFC3339 format: `yyyy-MM-ddTHH:mm:ssZ`. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink" /> is null. </exception>
        </member>
        <member name="M:Azure.Communication.Chat.ChatRestClient.ListChatThreadsNextPage(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)">
            <summary> Gets the list of chat threads of a user. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="maxPageSize"> The maximum number of chat threads returned per page. </param>
            <param name="startTime"> The earliest point in time to get chat threads up to. The timestamp should be in RFC3339 format: `yyyy-MM-ddTHH:mm:ssZ`. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink" /> is null. </exception>
        </member>
        <member name="T:Azure.Communication.Chat.ChatThreadClient">
            <summary>
            The Azure Communication Services ChatThread client.
            </summary>
        </member>
        <member name="P:Azure.Communication.Chat.ChatThreadClient.Id">
            <summary>
            Represents the unique identifier for the thread associated to this instance.
            </summary>
        </member>
        <member name="M:Azure.Communication.Chat.ChatThreadClient.#ctor(System.String,System.Uri,Azure.Communication.CommunicationTokenCredential,Azure.Communication.Chat.ChatClientOptions)">
            <summary> Initializes a new instance of <see cref="T:Azure.Communication.Chat.ChatThreadClient" />.</summary>
            <param name="threadId"></param>
            <param name="endpoint">The uri for the Azure Communication Services Chat.</param>
            <param name="communicationTokenCredential">Instance of <see cref="T:Azure.Communication.CommunicationTokenCredential" />.</param>
            <param name="options">Chat client options exposing <see cref="P:Azure.Core.ClientOptions.Diagnostics" />, <see cref="P:Azure.Core.ClientOptions.Retry" />, <see cref="P:Azure.Core.ClientOptions.Transport" />, etc.</param>
            <exception cref="T:System.ArgumentNullException"> This occurs when one of the required arguments is null. </exception>
        </member>
        <member name="M:Azure.Communication.Chat.ChatThreadClient.#ctor">
            <summary>Initializes a new instance of <see cref="T:Azure.Communication.Chat.ChatThreadClient" /> for mocking.</summary>
        </member>
        <member name="M:Azure.Communication.Chat.ChatThreadClient.UpdateTopicAsync(System.String,System.Threading.CancellationToken)">
            <summary> Updates the thread's topic asynchronously. </summary>
            <param name="topic"> Chat thread topic. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        </member>
        <member name="M:Azure.Communication.Chat.ChatThreadClient.UpdateTopic(System.String,System.Threading.CancellationToken)">
            <summary> Updates the thread's topic. </summary>
            <param name="topic"> Chat thread topic. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        </member>
        <member name="M:Azure.Communication.Chat.ChatThreadClient.GetPropertiesAsync(System.Threading.CancellationToken)">
            <summary> Gets a chat thread asynchronously. </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        </member>
        <member name="M:Azure.Communication.Chat.ChatThreadClient.GetProperties(System.Threading.CancellationToken)">
            <summary> Gets a chat thread. </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        </member>
        <member name="M:Azure.Communication.Chat.ChatThreadClient.SendMessageAsync(System.String,Azure.Communication.Chat.ChatMessageType,System.String,System.Threading.CancellationToken)">
            <summary> Sends a message to a thread asynchronously. </summary>
            <param name="content"> Chat message content. </param>
            <param name="type"> The chat message type. </param>
            <param name="senderDisplayName"> The display name of the chat message sender. This property is used to populate sender name for push notifications. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        </member>
        <member name="M:Azure.Communication.Chat.ChatThreadClient.SendMessageAsync(Azure.Communication.Chat.SendChatMessageOptions,System.Threading.CancellationToken)">
            <summary> Sends a message to a thread asynchronously. </summary>
            <param name="options"> Options for the message. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        </member>
        <member name="M:Azure.Communication.Chat.ChatThreadClient.SendMessage(System.String,Azure.Communication.Chat.ChatMessageType,System.String,System.Threading.CancellationToken)">
            <summary> Sends a message to a thread. </summary>
            <param name="content"> Message content. </param>
            <param name="type"> The chat message type. </param>
            <param name="senderDisplayName"> The display name of the message sender. This property is used to populate sender name for push notifications. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        </member>
        <member name="M:Azure.Communication.Chat.ChatThreadClient.SendMessage(Azure.Communication.Chat.SendChatMessageOptions,System.Threading.CancellationToken)">
            <summary> Sends a message to a thread. </summary>
            <param name="options">Options for the message. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        </member>
        <member name="M:Azure.Communication.Chat.ChatThreadClient.GetMessageAsync(System.String,System.Threading.CancellationToken)">
            <summary> Gets a message by id asynchronously. </summary>
            <param name="messageId"> The message id. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        </member>
        <member name="M:Azure.Communication.Chat.ChatThreadClient.GetMessage(System.String,System.Threading.CancellationToken)">
            <summary> Gets a message by id. </summary>
            <param name="messageId"> The message id. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        </member>
        <member name="M:Azure.Communication.Chat.ChatThreadClient.GetMessagesAsync(System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)">
            <summary> Gets a list of messages from a thread asynchronously. </summary>
            <param name="startTime"> The earliest point in time to get messages up to. The timestamp should be in ISO8601 format: `yyyy-MM-ddTHH:mm:ssZ`. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        </member>
        <member name="M:Azure.Communication.Chat.ChatThreadClient.GetMessages(System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)">
            <summary> Gets a list of messages from a thread. </summary>
            <param name="startTime"> The earliest point in time to get messages up to. The timestamp should be in ISO8601 format: `yyyy-MM-ddTHH:mm:ssZ`. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        </member>
        <member name="M:Azure.Communication.Chat.ChatThreadClient.UpdateMessageAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Updates a message asynchronously. </summary>
            <param name="messageId"> The message id. </param>
            <param name="content"> Chat message content. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        </member>
        <member name="M:Azure.Communication.Chat.ChatThreadClient.UpdateMessageAsync(Azure.Communication.Chat.UpdateChatMessageOptions,System.Threading.CancellationToken)">
            <summary> Updates a message asynchronously. </summary>
            <param name="options"> Options for the message. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        </member>
        <member name="M:Azure.Communication.Chat.ChatThreadClient.UpdateMessage(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Updates a message synchronously. </summary>
            <param name="messageId"> The message id. </param>
            <param name="content"> Chat message content. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        </member>
        <member name="M:Azure.Communication.Chat.ChatThreadClient.UpdateMessage(Azure.Communication.Chat.UpdateChatMessageOptions,System.Threading.CancellationToken)">
            <summary> Updates a message synchronously. </summary>
            <param name="options"> Options for the message. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        </member>
        <member name="M:Azure.Communication.Chat.ChatThreadClient.DeleteMessageAsync(System.String,System.Threading.CancellationToken)">
            <summary> Deletes a message. </summary>
            <param name="messageId"> The message id. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        </member>
        <member name="M:Azure.Communication.Chat.ChatThreadClient.DeleteMessage(System.String,System.Threading.CancellationToken)">
            <summary> Deletes a message. </summary>
            <param name="messageId"> The message id. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        </member>
        <member name="M:Azure.Communication.Chat.ChatThreadClient.AddParticipantAsync(Azure.Communication.Chat.ChatParticipant,System.Threading.CancellationToken)">
            <summary> Adds a participant to a thread asynchronously. If the participant already exist, no change occurs. </summary>
            <param name="participant"> Participant to add to a chat thread. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        </member>
        <member name="M:Azure.Communication.Chat.ChatThreadClient.AddParticipant(Azure.Communication.Chat.ChatParticipant,System.Threading.CancellationToken)">
            <summary> Adds participants to a thread. If participants already exist, no change occurs. </summary>
            <param name="participant"> Participants to add to a chat thread. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        </member>
        <member name="M:Azure.Communication.Chat.ChatThreadClient.AddParticipantsAsync(System.Collections.Generic.IEnumerable{Azure.Communication.Chat.ChatParticipant},System.Threading.CancellationToken)">
            <summary> Adds participants to a thread asynchronously. If participants already exist, no change occurs. </summary>
            <param name="participants"> Participants to add to a chat thread. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        </member>
        <member name="M:Azure.Communication.Chat.ChatThreadClient.AddParticipants(System.Collections.Generic.IEnumerable{Azure.Communication.Chat.ChatParticipant},System.Threading.CancellationToken)">
            <summary> Adds participants to a thread. If participants already exist, no change occurs. </summary>
            <param name="participants"> Participants to add to a chat thread. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        </member>
        <member name="M:Azure.Communication.Chat.ChatThreadClient.GetParticipantsAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> Gets the participants of a thread asynchronously. </summary>
            <param name="skip"> Skips participants up to a specified position in response. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        </member>
        <member name="M:Azure.Communication.Chat.ChatThreadClient.GetParticipants(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> Gets the participants of a thread. </summary>
            <param name="skip"> Skips participants up to a specified position in response. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        </member>
        <member name="M:Azure.Communication.Chat.ChatThreadClient.RemoveParticipantAsync(Azure.Communication.CommunicationIdentifier,System.Threading.CancellationToken)">
            <summary> Remove a participant from a thread asynchronously.</summary>
            <param name="identifier"><see cref="T:Azure.Communication.CommunicationIdentifier" /> to be removed from the chat thread participants.</param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        </member>
        <member name="M:Azure.Communication.Chat.ChatThreadClient.RemoveParticipant(Azure.Communication.CommunicationIdentifier,System.Threading.CancellationToken)">
            <summary> Remove a member from a thread .</summary>
            <param name="identifier"><see cref="T:Azure.Communication.CommunicationIdentifier" /> to be removed from the chat thread participants.</param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        </member>
        <member name="M:Azure.Communication.Chat.ChatThreadClient.SendTypingNotificationAsync(System.Threading.CancellationToken)">
            <summary> Posts a typing event to a thread, on behalf of a user asynchronously. </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        </member>
        <member name="M:Azure.Communication.Chat.ChatThreadClient.SendTypingNotification(System.Threading.CancellationToken)">
            <summary> Posts a typing event to a thread, on behalf of a user. </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        </member>
        <member name="M:Azure.Communication.Chat.ChatThreadClient.SendTypingNotificationAsync(Azure.Communication.Chat.TypingNotificationOptions,System.Threading.CancellationToken)">
            <summary> Posts a typing event to a thread, on behalf of a user asynchronously. </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <param name="options"> Typing notification options. </param>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        </member>
        <member name="M:Azure.Communication.Chat.ChatThreadClient.SendTypingNotification(Azure.Communication.Chat.TypingNotificationOptions,System.Threading.CancellationToken)">
            <summary> Posts a typing event to a thread, on behalf of a user. </summary>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <param name="options"> Typing notification options. </param>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        </member>
        <member name="M:Azure.Communication.Chat.ChatThreadClient.SendReadReceiptAsync(System.String,System.Threading.CancellationToken)">
            <summary> Sends a read receipt event to a thread, on behalf of a user asynchronously. </summary>
            <param name="messageId"> Id of the latest chat message read by the user. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        </member>
        <member name="M:Azure.Communication.Chat.ChatThreadClient.SendReadReceipt(System.String,System.Threading.CancellationToken)">
            <summary> Sends a read receipt event to a thread, on behalf of a user. </summary>
            <param name="messageId"> Id of the latest chat message read by the user. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        </member>
        <member name="M:Azure.Communication.Chat.ChatThreadClient.GetReadReceiptsAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> Gets read receipts for a thread asynchronously. </summary>
            <param name="skip"> Skips chat message read receipts up to a specified position in response. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        </member>
        <member name="M:Azure.Communication.Chat.ChatThreadClient.GetReadReceipts(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> Gets read receipts for a thread. </summary>
            <param name="skip"> Skips chat message read receipts up to a specified position in response. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        </member>
        <member name="T:Azure.Communication.Chat.ChatModelFactory">
            <summary> Model factory for models. </summary>
            <summary>
            Model factory that enables mocking for the Chat library.
            </summary>
        </member>
        <member name="M:Azure.Communication.Chat.ChatModelFactory.ChatError(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Azure.Communication.Chat.ChatError},Azure.Communication.Chat.ChatError)">
            <summary> Initializes a new instance of <see cref="T:Azure.Communication.Chat.ChatError" />. </summary>
            <param name="code"> The error code. </param>
            <param name="message"> The error message. </param>
            <param name="target"> The error target. </param>
            <param name="details"> Further details about specific errors that led to this error. </param>
            <param name="innerError"> The inner error if any. </param>
            <returns> A new <see cref="T:Azure.Communication.Chat.ChatError" /> instance for mocking. </returns>
        </member>
        <member name="M:Azure.Communication.Chat.ChatModelFactory.AddChatParticipantsResult(System.Collections.Generic.IEnumerable{Azure.Communication.Chat.ChatError})">
            <summary> Initializes a new instance of <see cref="T:Azure.Communication.Chat.AddChatParticipantsResult" />. </summary>
            <param name="invalidParticipants"> The participants that failed to be added to the chat thread. </param>
            <returns> A new <see cref="T:Azure.Communication.Chat.AddChatParticipantsResult" /> instance for mocking. </returns>
        </member>
        <member name="M:Azure.Communication.Chat.ChatModelFactory.ChatMessage(System.String,Azure.Communication.Chat.ChatMessageType,System.String,System.String,Azure.Communication.Chat.ChatMessageContent,System.String,System.DateTimeOffset,System.String,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Communication.Chat.ChatMessage" /> class.
            </summary>
            <param name="id"> The id of the chat message. </param>
            <param name="type"> The chat message priority. </param>
            <param name="sequenceId"> The sequenceId of the chat message. </param>
            <param name="version"> Version of the chat message. </param>
            <param name="content"> Content of the chat message. </param>
            <param name="senderDisplayName"> The display name of the chat message sender. </param>
            <param name="createdOn"> The timestamp when the chat message arrived at the server. </param>
            <param name="senderId"> The id of the chat message sender. </param>
            <param name="deletedOn"> The timestamp when the chat message was deleted. </param>
            <param name="editedOn"> The timestamp when the chat message was edited. </param>
            <param name="metadata"> Property bag of message metadata key - value pairs. </param>
            <returns>A new <see cref="T:Azure.Communication.Chat.ChatMessage" /> instance for mocking.</returns>
        </member>
        <member name="M:Azure.Communication.Chat.ChatModelFactory.ChatMessage(System.String,Azure.Communication.Chat.ChatMessageType,System.String,System.String,Azure.Communication.Chat.ChatMessageContent,System.String,System.DateTimeOffset,System.String,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Communication.Chat.ChatMessage" /> class.
            </summary>
            <param name="id"> The id of the chat message. </param>
            <param name="type"> The chat message priority. </param>
            <param name="sequenceId"> The sequenceId of the chat message. </param>
            <param name="version"> Version of the chat message. </param>
            <param name="content"> Content of the chat message. </param>
            <param name="senderDisplayName"> The display name of the chat message sender. </param>
            <param name="createdOn"> The timestamp when the chat message arrived at the server. </param>
            <param name="senderId"> The id of the chat message sender. </param>
            <param name="deletedOn"> The timestamp when the chat message was deleted. </param>
            <param name="editedOn"> The timestamp when the chat message was edited. </param>
            <returns>A new <see cref="T:Azure.Communication.Chat.ChatMessage" /> instance for mocking.</returns>
        </member>
        <member name="M:Azure.Communication.Chat.ChatModelFactory.ChatThreadItem(System.String,System.String,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
            <summary>
            Initializes a new instance of the <see cref="M:Azure.Communication.Chat.ChatModelFactory.ChatThreadItem(System.String,System.String,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})" /> class.
            </summary>
            <param name="id"> Chat thread id. </param>
            <param name="topic"> Chat thread topic. </param>
            <param name="deletedOn"> The timestamp when the chat thread was deleted. The timestamp is in ISO8601 format: `yyyy-MM-ddTHH:mm:ssZ`. </param>
            <param name="lastMessageReceivedOn"> The timestamp when the last message arrived at the server. The timestamp is in ISO8601 format: `yyyy-MM-ddTHH:mm:ssZ`. </param>
            <returns>A new <see cref="M:Azure.Communication.Chat.ChatModelFactory.ChatThreadItem(System.String,System.String,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})" /> instance for mocking.</returns>
        </member>
        <member name="M:Azure.Communication.Chat.ChatModelFactory.ChatMessageReadReceipt(Azure.Communication.CommunicationIdentifier,System.String,System.DateTimeOffset)">
            <summary>
            Initializes a new instance of the <see cref="M:Azure.Communication.Chat.ChatModelFactory.ChatMessageReadReceipt(Azure.Communication.CommunicationIdentifier,System.String,System.DateTimeOffset)" /> class.
            </summary>
            <param name="sender">CommunicationIdentifier of the of message sender. </param>
            <param name="chatMessageId"> Id for the chat message that has been read. </param>
            <param name="readOn"> Read receipt timestamp. </param>
            <returns>A new <see cref="M:Azure.Communication.Chat.ChatModelFactory.ChatMessageReadReceipt(Azure.Communication.CommunicationIdentifier,System.String,System.DateTimeOffset)" /> instance for mocking.</returns>
        </member>
        <member name="M:Azure.Communication.Chat.ChatModelFactory.ChatMessageContent(System.String,System.String,Azure.Communication.CommunicationUserIdentifier,System.Collections.Generic.IEnumerable{Azure.Communication.Chat.ChatParticipant})">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Communication.Chat.ChatMessageContent" /> class.
            </summary>
            <param name="message"> Chat message. </param>
            <param name="topic"> Topic of the message content. </param>
            <param name="communicationUserIdentifier"> Communication user identifier.</param>
            <param name="participants"> List of chat participants. </param>
            <returns>A new <see cref="T:Azure.Communication.Chat.ChatMessageContent" /> instance for mocking.</returns>
        </member>
        <member name="M:Azure.Communication.Chat.ChatModelFactory.ChatMessageContent(System.String,System.String,Azure.Communication.CommunicationUserIdentifier,System.Collections.Generic.IEnumerable{Azure.Communication.Chat.ChatParticipant},System.Collections.Generic.IEnumerable{Azure.Communication.Chat.ChatAttachment})">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Communication.Chat.ChatMessageContent" /> class.
            </summary>
            <param name="message"> Chat message. </param>
            <param name="topic"> Topic of the message content. </param>
            <param name="communicationUserIdentifier"> Communication user identifier.</param>
            <param name="participants"> List of chat participants. </param>
            <param name="attachments"> List of chat attachments. </param>
            <returns>A new <see cref="T:Azure.Communication.Chat.ChatMessageContent" /> instance for mocking.</returns>
        </member>
        <member name="M:Azure.Communication.Chat.ChatModelFactory.ChatThreadProperties(System.String,System.String,System.DateTimeOffset,Azure.Communication.CommunicationIdentifier,System.DateTimeOffset)">
            <summary>
            Initializes a new instance of the <see cref="M:Azure.Communication.Chat.ChatModelFactory.ChatThreadProperties(System.String,System.String,System.DateTimeOffset,Azure.Communication.CommunicationIdentifier,System.DateTimeOffset)" /> class.
            </summary>
            <param name="id"> Chat message. </param>
            <param name="topic"> Topic of the message content. </param>
            <param name="createdOn"> Created on date time </param>
            <param name="createdBy"> Created by </param>
            <param name="deletedOn"> Deleted on date time </param>
            <returns>A new <see cref="M:Azure.Communication.Chat.ChatModelFactory.ChatThreadProperties(System.String,System.String,System.DateTimeOffset,Azure.Communication.CommunicationIdentifier,System.DateTimeOffset)" /> instance for mocking.</returns>
        </member>
        <member name="M:Azure.Communication.Chat.ChatModelFactory.CreateChatThreadResult(Azure.Communication.Chat.ChatThreadProperties,System.Collections.Generic.IEnumerable{Azure.Communication.Chat.ChatError})">
            <summary>
            Initializes a new instance of the <see cref="M:Azure.Communication.Chat.ChatModelFactory.CreateChatThreadResult(Azure.Communication.Chat.ChatThreadProperties,System.Collections.Generic.IEnumerable{Azure.Communication.Chat.ChatError})" /> class.
            </summary>
            <param name="chatThread"> Thread properties </param>
            <param name="invalidParticipants"> List of invalid participants</param>
            <returns>A new <see cref="M:Azure.Communication.Chat.ChatModelFactory.CreateChatThreadResult(Azure.Communication.Chat.ChatThreadProperties,System.Collections.Generic.IEnumerable{Azure.Communication.Chat.ChatError})" /> instance for mocking.</returns>
        </member>
        <member name="M:Azure.Communication.Chat.ChatModelFactory.ChatAttachment(System.String,Azure.Communication.Chat.ChatAttachmentType,System.String,System.Uri,System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="M:Azure.Communication.Chat.ChatModelFactory.ChatAttachment(System.String,Azure.Communication.Chat.ChatAttachmentType,System.String,System.Uri,System.Uri)" /> class.
            </summary>
            <param name="id"> Id of the attachment. </param>
            <param name="attachmentType"> The type of attachment. </param>
            <param name="name"> The name of the attachment content. </param>
            <param name="uri"> The URI where the attachment can be downloaded. </param>
            <param name="previewUri"> The URI where the preview of attachment can be downloaded. </param>
            <returns>A new <see cref="M:Azure.Communication.Chat.ChatModelFactory.ChatAttachment(System.String,Azure.Communication.Chat.ChatAttachmentType,System.String,System.Uri,System.Uri)" /> instance for mocking.</returns>
        </member>
        <member name="M:Azure.Communication.Chat.ChatModelFactory.ChatParticipant(Azure.Communication.CommunicationIdentifier,System.String,System.Nullable{System.DateTimeOffset})">
            <summary>
            Initializes a new instance of the <see cref="M:Azure.Communication.Chat.ChatModelFactory.ChatParticipant(Azure.Communication.CommunicationIdentifier,System.String,System.Nullable{System.DateTimeOffset})" /> class.
            </summary>
            <param name="user"> User </param>
            <param name="displayName">Display name for the chat thread member.</param>
            <param name="shareHistoryTime"> Time from which the chat history is shared with the member. The timestamp is in ISO8601 format: `yyyy-MM-ddTHH:mm:ssZ`.</param>
            <returns>A new <see cref="M:Azure.Communication.Chat.ChatModelFactory.ChatParticipant(Azure.Communication.CommunicationIdentifier,System.String,System.Nullable{System.DateTimeOffset})" /> instance for mocking.</returns>
        </member>
        <member name="M:Azure.Communication.Chat.ChatModelFactory.SendChatMessageResult(System.String)">
            <summary>
            Initializes a new instance of the <see cref="M:Azure.Communication.Chat.ChatModelFactory.SendChatMessageResult(System.String)" /> class.
            </summary>
            <param name="id"> A server-generated message id. </param>
            <returns>A new <see cref="M:Azure.Communication.Chat.ChatModelFactory.SendChatMessageResult(System.String)" /> instance for mocking.</returns>
        </member>
        <member name="P:Azure.Communication.Chat.ChatThreadRestClient.ClientDiagnostics">
            <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        </member>
        <member name="M:Azure.Communication.Chat.ChatThreadRestClient.#ctor(Azure.Core.Pipeline.ClientDiagnostics,Azure.Core.Pipeline.HttpPipeline,System.String,System.String)">
            <summary> Initializes a new instance of ChatThreadRestClient. </summary>
            <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
            <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
            <param name="endpoint"> The endpoint of the Azure Communication resource. </param>
            <param name="apiVersion"> Api Version. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="clientDiagnostics" />, <paramref name="pipeline" />, <paramref name="endpoint" /> or <paramref name="apiVersion" /> is null. </exception>
        </member>
        <member name="M:Azure.Communication.Chat.ChatThreadRestClient.ListChatReadReceiptsAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> Gets chat message read receipts for a thread. </summary>
            <param name="chatThreadId"> Thread id to get the chat message read receipts for. </param>
            <param name="maxPageSize"> The maximum number of chat message read receipts to be returned per page. </param>
            <param name="skip"> Skips chat message read receipts up to a specified position in response. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="chatThreadId" /> is null. </exception>
        </member>
        <member name="M:Azure.Communication.Chat.ChatThreadRestClient.ListChatReadReceipts(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> Gets chat message read receipts for a thread. </summary>
            <param name="chatThreadId"> Thread id to get the chat message read receipts for. </param>
            <param name="maxPageSize"> The maximum number of chat message read receipts to be returned per page. </param>
            <param name="skip"> Skips chat message read receipts up to a specified position in response. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="chatThreadId" /> is null. </exception>
        </member>
        <member name="M:Azure.Communication.Chat.ChatThreadRestClient.SendChatReadReceiptAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Sends a read receipt event to a thread, on behalf of a user. </summary>
            <param name="chatThreadId"> Thread id to send the read receipt event to. </param>
            <param name="chatMessageId"> Id of the latest chat message read by the user. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="chatThreadId" /> or <paramref name="chatMessageId" /> is null. </exception>
        </member>
        <member name="M:Azure.Communication.Chat.ChatThreadRestClient.SendChatReadReceipt(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Sends a read receipt event to a thread, on behalf of a user. </summary>
            <param name="chatThreadId"> Thread id to send the read receipt event to. </param>
            <param name="chatMessageId"> Id of the latest chat message read by the user. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="chatThreadId" /> or <paramref name="chatMessageId" /> is null. </exception>
        </member>
        <member name="M:Azure.Communication.Chat.ChatThreadRestClient.SendChatMessageAsync(System.String,System.String,System.String,System.Nullable{Azure.Communication.Chat.ChatMessageType},System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary> Sends a message to a thread. </summary>
            <param name="chatThreadId"> The thread id to send the message to. </param>
            <param name="content"> Chat message content. </param>
            <param name="senderDisplayName"> The display name of the chat message sender. This property is used to populate sender name for push notifications. </param>
            <param name="type"> The chat message type. </param>
            <param name="metadata"> Message metadata. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="chatThreadId" /> or <paramref name="content" /> is null. </exception>
        </member>
        <member name="M:Azure.Communication.Chat.ChatThreadRestClient.SendChatMessage(System.String,System.String,System.String,System.Nullable{Azure.Communication.Chat.ChatMessageType},System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary> Sends a message to a thread. </summary>
            <param name="chatThreadId"> The thread id to send the message to. </param>
            <param name="content"> Chat message content. </param>
            <param name="senderDisplayName"> The display name of the chat message sender. This property is used to populate sender name for push notifications. </param>
            <param name="type"> The chat message type. </param>
            <param name="metadata"> Message metadata. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="chatThreadId" /> or <paramref name="content" /> is null. </exception>
        </member>
        <member name="M:Azure.Communication.Chat.ChatThreadRestClient.ListChatMessagesAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)">
            <summary> Gets a list of messages from a thread. </summary>
            <param name="chatThreadId"> The thread id of the message. </param>
            <param name="maxPageSize"> The maximum number of messages to be returned per page. </param>
            <param name="startTime"> The earliest point in time to get messages up to. The timestamp should be in RFC3339 format: `yyyy-MM-ddTHH:mm:ssZ`. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="chatThreadId" /> is null. </exception>
        </member>
        <member name="M:Azure.Communication.Chat.ChatThreadRestClient.ListChatMessages(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)">
            <summary> Gets a list of messages from a thread. </summary>
            <param name="chatThreadId"> The thread id of the message. </param>
            <param name="maxPageSize"> The maximum number of messages to be returned per page. </param>
            <param name="startTime"> The earliest point in time to get messages up to. The timestamp should be in RFC3339 format: `yyyy-MM-ddTHH:mm:ssZ`. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="chatThreadId" /> is null. </exception>
        </member>
        <member name="M:Azure.Communication.Chat.ChatThreadRestClient.GetChatMessageAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets a message by id. </summary>
            <param name="chatThreadId"> The thread id to which the message was sent. </param>
            <param name="chatMessageId"> The message id. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="chatThreadId" /> or <paramref name="chatMessageId" /> is null. </exception>
        </member>
        <member name="M:Azure.Communication.Chat.ChatThreadRestClient.GetChatMessage(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets a message by id. </summary>
            <param name="chatThreadId"> The thread id to which the message was sent. </param>
            <param name="chatMessageId"> The message id. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="chatThreadId" /> or <paramref name="chatMessageId" /> is null. </exception>
        </member>
        <member name="M:Azure.Communication.Chat.ChatThreadRestClient.UpdateChatMessageAsync(System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary> Updates a message. </summary>
            <param name="chatThreadId"> The thread id to which the message was sent. </param>
            <param name="chatMessageId"> The message id. </param>
            <param name="content"> Chat message content. </param>
            <param name="metadata"> Message metadata. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="chatThreadId" /> or <paramref name="chatMessageId" /> is null. </exception>
        </member>
        <member name="M:Azure.Communication.Chat.ChatThreadRestClient.UpdateChatMessage(System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary> Updates a message. </summary>
            <param name="chatThreadId"> The thread id to which the message was sent. </param>
            <param name="chatMessageId"> The message id. </param>
            <param name="content"> Chat message content. </param>
            <param name="metadata"> Message metadata. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="chatThreadId" /> or <paramref name="chatMessageId" /> is null. </exception>
        </member>
        <member name="M:Azure.Communication.Chat.ChatThreadRestClient.DeleteChatMessageAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Deletes a message. </summary>
            <param name="chatThreadId"> The thread id to which the message was sent. </param>
            <param name="chatMessageId"> The message id. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="chatThreadId" /> or <paramref name="chatMessageId" /> is null. </exception>
        </member>
        <member name="M:Azure.Communication.Chat.ChatThreadRestClient.DeleteChatMessage(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Deletes a message. </summary>
            <param name="chatThreadId"> The thread id to which the message was sent. </param>
            <param name="chatMessageId"> The message id. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="chatThreadId" /> or <paramref name="chatMessageId" /> is null. </exception>
        </member>
        <member name="M:Azure.Communication.Chat.ChatThreadRestClient.ListChatParticipantsAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> Gets the participants of a thread. </summary>
            <param name="chatThreadId"> Thread id to get participants for. </param>
            <param name="maxPageSize"> The maximum number of participants to be returned per page. </param>
            <param name="skip"> Skips participants up to a specified position in response. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="chatThreadId" /> is null. </exception>
        </member>
        <member name="M:Azure.Communication.Chat.ChatThreadRestClient.ListChatParticipants(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> Gets the participants of a thread. </summary>
            <param name="chatThreadId"> Thread id to get participants for. </param>
            <param name="maxPageSize"> The maximum number of participants to be returned per page. </param>
            <param name="skip"> Skips participants up to a specified position in response. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="chatThreadId" /> is null. </exception>
        </member>
        <member name="M:Azure.Communication.Chat.ChatThreadRestClient.RemoveChatParticipantAsync(System.String,System.Nullable{Azure.Communication.CommunicationIdentifierModelKind},System.String,Azure.Communication.CommunicationUserIdentifierModel,Azure.Communication.PhoneNumberIdentifierModel,Azure.Communication.MicrosoftTeamsUserIdentifierModel,Azure.Communication.MicrosoftTeamsAppIdentifierModel,System.Threading.CancellationToken)">
            <summary> Remove a participant from a thread. </summary>
            <param name="chatThreadId"> Thread id to remove the participant from. </param>
            <param name="kind"> The identifier kind. Only required in responses. </param>
            <param name="rawId"> Raw Id of the identifier. Optional in requests, required in responses. </param>
            <param name="communicationUser"> The communication user. </param>
            <param name="phoneNumber"> The phone number. </param>
            <param name="microsoftTeamsUser"> The Microsoft Teams user. </param>
            <param name="microsoftTeamsApp"> The Microsoft Teams application. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="chatThreadId" /> is null. </exception>
        </member>
        <member name="M:Azure.Communication.Chat.ChatThreadRestClient.RemoveChatParticipant(System.String,System.Nullable{Azure.Communication.CommunicationIdentifierModelKind},System.String,Azure.Communication.CommunicationUserIdentifierModel,Azure.Communication.PhoneNumberIdentifierModel,Azure.Communication.MicrosoftTeamsUserIdentifierModel,Azure.Communication.MicrosoftTeamsAppIdentifierModel,System.Threading.CancellationToken)">
            <summary> Remove a participant from a thread. </summary>
            <param name="chatThreadId"> Thread id to remove the participant from. </param>
            <param name="kind"> The identifier kind. Only required in responses. </param>
            <param name="rawId"> Raw Id of the identifier. Optional in requests, required in responses. </param>
            <param name="communicationUser"> The communication user. </param>
            <param name="phoneNumber"> The phone number. </param>
            <param name="microsoftTeamsUser"> The Microsoft Teams user. </param>
            <param name="microsoftTeamsApp"> The Microsoft Teams application. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="chatThreadId" /> is null. </exception>
        </member>
        <member name="M:Azure.Communication.Chat.ChatThreadRestClient.AddChatParticipantsAsync(System.String,System.Collections.Generic.IEnumerable{Azure.Communication.Chat.ChatParticipantInternal},System.Threading.CancellationToken)">
            <summary> Adds thread participants to a thread. If participants already exist, no change occurs. </summary>
            <param name="chatThreadId"> Id of the thread to add participants to. </param>
            <param name="participants"> Participants to add to a chat thread. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="chatThreadId" /> or <paramref name="participants" /> is null. </exception>
        </member>
        <member name="M:Azure.Communication.Chat.ChatThreadRestClient.AddChatParticipants(System.String,System.Collections.Generic.IEnumerable{Azure.Communication.Chat.ChatParticipantInternal},System.Threading.CancellationToken)">
            <summary> Adds thread participants to a thread. If participants already exist, no change occurs. </summary>
            <param name="chatThreadId"> Id of the thread to add participants to. </param>
            <param name="participants"> Participants to add to a chat thread. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="chatThreadId" /> or <paramref name="participants" /> is null. </exception>
        </member>
        <member name="M:Azure.Communication.Chat.ChatThreadRestClient.UpdateChatThreadPropertiesAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Updates a thread's properties. </summary>
            <param name="chatThreadId"> The id of the thread to update. </param>
            <param name="topic"> Chat thread topic. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="chatThreadId" /> is null. </exception>
        </member>
        <member name="M:Azure.Communication.Chat.ChatThreadRestClient.UpdateChatThreadProperties(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Updates a thread's properties. </summary>
            <param name="chatThreadId"> The id of the thread to update. </param>
            <param name="topic"> Chat thread topic. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="chatThreadId" /> is null. </exception>
        </member>
        <member name="M:Azure.Communication.Chat.ChatThreadRestClient.GetChatThreadPropertiesAsync(System.String,System.Threading.CancellationToken)">
            <summary> Gets a chat thread's properties. </summary>
            <param name="chatThreadId"> Id of the thread. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="chatThreadId" /> is null. </exception>
        </member>
        <member name="M:Azure.Communication.Chat.ChatThreadRestClient.GetChatThreadProperties(System.String,System.Threading.CancellationToken)">
            <summary> Gets a chat thread's properties. </summary>
            <param name="chatThreadId"> Id of the thread. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="chatThreadId" /> is null. </exception>
        </member>
        <member name="M:Azure.Communication.Chat.ChatThreadRestClient.SendTypingNotificationAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Posts a typing event to a thread, on behalf of a user. </summary>
            <param name="chatThreadId"> Id of the thread. </param>
            <param name="senderDisplayName"> The display name of the typing notification sender. This property is used to populate sender name for push notifications. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="chatThreadId" /> is null. </exception>
        </member>
        <member name="M:Azure.Communication.Chat.ChatThreadRestClient.SendTypingNotification(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Posts a typing event to a thread, on behalf of a user. </summary>
            <param name="chatThreadId"> Id of the thread. </param>
            <param name="senderDisplayName"> The display name of the typing notification sender. This property is used to populate sender name for push notifications. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="chatThreadId" /> is null. </exception>
        </member>
        <member name="M:Azure.Communication.Chat.ChatThreadRestClient.ListChatReadReceiptsNextPageAsync(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> Gets chat message read receipts for a thread. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="chatThreadId"> Thread id to get the chat message read receipts for. </param>
            <param name="maxPageSize"> The maximum number of chat message read receipts to be returned per page. </param>
            <param name="skip"> Skips chat message read receipts up to a specified position in response. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink" /> or <paramref name="chatThreadId" /> is null. </exception>
        </member>
        <member name="M:Azure.Communication.Chat.ChatThreadRestClient.ListChatReadReceiptsNextPage(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> Gets chat message read receipts for a thread. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="chatThreadId"> Thread id to get the chat message read receipts for. </param>
            <param name="maxPageSize"> The maximum number of chat message read receipts to be returned per page. </param>
            <param name="skip"> Skips chat message read receipts up to a specified position in response. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink" /> or <paramref name="chatThreadId" /> is null. </exception>
        </member>
        <member name="M:Azure.Communication.Chat.ChatThreadRestClient.ListChatMessagesNextPageAsync(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)">
            <summary> Gets a list of messages from a thread. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="chatThreadId"> The thread id of the message. </param>
            <param name="maxPageSize"> The maximum number of messages to be returned per page. </param>
            <param name="startTime"> The earliest point in time to get messages up to. The timestamp should be in RFC3339 format: `yyyy-MM-ddTHH:mm:ssZ`. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink" /> or <paramref name="chatThreadId" /> is null. </exception>
        </member>
        <member name="M:Azure.Communication.Chat.ChatThreadRestClient.ListChatMessagesNextPage(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)">
            <summary> Gets a list of messages from a thread. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="chatThreadId"> The thread id of the message. </param>
            <param name="maxPageSize"> The maximum number of messages to be returned per page. </param>
            <param name="startTime"> The earliest point in time to get messages up to. The timestamp should be in RFC3339 format: `yyyy-MM-ddTHH:mm:ssZ`. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink" /> or <paramref name="chatThreadId" /> is null. </exception>
        </member>
        <member name="M:Azure.Communication.Chat.ChatThreadRestClient.ListChatParticipantsNextPageAsync(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> Gets the participants of a thread. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="chatThreadId"> Thread id to get participants for. </param>
            <param name="maxPageSize"> The maximum number of participants to be returned per page. </param>
            <param name="skip"> Skips participants up to a specified position in response. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink" /> or <paramref name="chatThreadId" /> is null. </exception>
        </member>
        <member name="M:Azure.Communication.Chat.ChatThreadRestClient.ListChatParticipantsNextPage(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary> Gets the participants of a thread. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="chatThreadId"> Thread id to get participants for. </param>
            <param name="maxPageSize"> The maximum number of participants to be returned per page. </param>
            <param name="skip"> Skips participants up to a specified position in response. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink" /> or <paramref name="chatThreadId" /> is null. </exception>
        </member>
        <member name="T:Azure.Communication.Chat.AddChatParticipantsRequest">
            <summary> Participants to be added to the thread. </summary>
        </member>
        <member name="M:Azure.Communication.Chat.AddChatParticipantsRequest.#ctor(System.Collections.Generic.IEnumerable{Azure.Communication.Chat.ChatParticipantInternal})">
            <summary> Initializes a new instance of <see cref="T:Azure.Communication.Chat.AddChatParticipantsRequest" />. </summary>
            <param name="participants"> Participants to add to a chat thread. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="participants" /> is null. </exception>
        </member>
        <member name="M:Azure.Communication.Chat.AddChatParticipantsRequest.#ctor(System.Collections.Generic.IList{Azure.Communication.Chat.ChatParticipantInternal})">
            <summary> Initializes a new instance of <see cref="T:Azure.Communication.Chat.AddChatParticipantsRequest" />. </summary>
            <param name="participants"> Participants to add to a chat thread. </param>
        </member>
        <member name="P:Azure.Communication.Chat.AddChatParticipantsRequest.Participants">
            <summary> Participants to add to a chat thread. </summary>
        </member>
        <member name="M:Azure.Communication.Chat.AddChatParticipantsRequest.ToRequestContent">
            <summary> Convert into a <see cref="T:Azure.Core.RequestContent" />. </summary>
        </member>
        <member name="T:Azure.Communication.Chat.AddChatParticipantsResult">
            <summary> Result of the add chat participants operation. </summary>
        </member>
        <member name="M:Azure.Communication.Chat.AddChatParticipantsResult.#ctor">
            <summary> Initializes a new instance of <see cref="T:Azure.Communication.Chat.AddChatParticipantsResult" />. </summary>
        </member>
        <member name="M:Azure.Communication.Chat.AddChatParticipantsResult.#ctor(System.Collections.Generic.IReadOnlyList{Azure.Communication.Chat.ChatError})">
            <summary> Initializes a new instance of <see cref="T:Azure.Communication.Chat.AddChatParticipantsResult" />. </summary>
            <param name="invalidParticipants"> The participants that failed to be added to the chat thread. </param>
        </member>
        <member name="P:Azure.Communication.Chat.AddChatParticipantsResult.InvalidParticipants">
            <summary> The participants that failed to be added to the chat thread. </summary>
        </member>
        <member name="M:Azure.Communication.Chat.AddChatParticipantsResult.FromResponse(Azure.Response)">
            <summary> Deserializes the model from a raw response. </summary>
            <param name="response"> The response to deserialize the model from. </param>
        </member>
        <member name="T:Azure.Communication.Chat.ChatAttachmentInternal">
            <summary> An attachment in a chat message. </summary>
        </member>
        <member name="M:Azure.Communication.Chat.ChatAttachmentInternal.#ctor(System.String,Azure.Communication.Chat.ChatAttachmentType)">
            <summary> Initializes a new instance of <see cref="T:Azure.Communication.Chat.ChatAttachmentInternal" />. </summary>
            <param name="id"> Id of the attachment. </param>
            <param name="attachmentType"> The type of attachment. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="id" /> is null. </exception>
        </member>
        <member name="M:Azure.Communication.Chat.ChatAttachmentInternal.#ctor(System.String,Azure.Communication.Chat.ChatAttachmentType,System.String,System.Uri,System.Uri)">
            <summary> Initializes a new instance of <see cref="T:Azure.Communication.Chat.ChatAttachmentInternal" />. </summary>
            <param name="id"> Id of the attachment. </param>
            <param name="attachmentType"> The type of attachment. </param>
            <param name="name"> The name of the attachment content. </param>
            <param name="url"> The URL where the attachment can be downloaded. </param>
            <param name="previewUrl"> The URL where the preview of attachment can be downloaded. </param>
        </member>
        <member name="P:Azure.Communication.Chat.ChatAttachmentInternal.Id">
            <summary> Id of the attachment. </summary>
        </member>
        <member name="P:Azure.Communication.Chat.ChatAttachmentInternal.AttachmentType">
            <summary> The type of attachment. </summary>
        </member>
        <member name="P:Azure.Communication.Chat.ChatAttachmentInternal.Name">
            <summary> The name of the attachment content. </summary>
        </member>
        <member name="P:Azure.Communication.Chat.ChatAttachmentInternal.Url">
            <summary> The URL where the attachment can be downloaded. </summary>
        </member>
        <member name="P:Azure.Communication.Chat.ChatAttachmentInternal.PreviewUrl">
            <summary> The URL where the preview of attachment can be downloaded. </summary>
        </member>
        <member name="M:Azure.Communication.Chat.ChatAttachmentInternal.FromResponse(Azure.Response)">
            <summary> Deserializes the model from a raw response. </summary>
            <param name="response"> The response to deserialize the model from. </param>
        </member>
        <member name="T:Azure.Communication.Chat.ChatAttachmentType">
            <summary> The type of attachment. </summary>
        </member>
        <member name="M:Azure.Communication.Chat.ChatAttachmentType.#ctor(System.String)">
            <summary> Initializes a new instance of <see cref="T:Azure.Communication.Chat.ChatAttachmentType" />. </summary>
            <exception cref="T:System.ArgumentNullException"> <paramref name="value" /> is null. </exception>
        </member>
        <member name="P:Azure.Communication.Chat.ChatAttachmentType.Image">
            <summary> image. </summary>
        </member>
        <member name="P:Azure.Communication.Chat.ChatAttachmentType.File">
            <summary> file. </summary>
        </member>
        <member name="M:Azure.Communication.Chat.ChatAttachmentType.op_Equality(Azure.Communication.Chat.ChatAttachmentType,Azure.Communication.Chat.ChatAttachmentType)">
            <summary> Determines if two <see cref="T:Azure.Communication.Chat.ChatAttachmentType" /> values are the same. </summary>
        </member>
        <member name="M:Azure.Communication.Chat.ChatAttachmentType.op_Inequality(Azure.Communication.Chat.ChatAttachmentType,Azure.Communication.Chat.ChatAttachmentType)">
            <summary> Determines if two <see cref="T:Azure.Communication.Chat.ChatAttachmentType" /> values are not the same. </summary>
        </member>
        <member name="M:Azure.Communication.Chat.ChatAttachmentType.op_Implicit(System.String)~Azure.Communication.Chat.ChatAttachmentType">
            <summary> Converts a string to a <see cref="T:Azure.Communication.Chat.ChatAttachmentType" />. </summary>
        </member>
        <member name="M:Azure.Communication.Chat.ChatAttachmentType.Equals(System.Object)">
            <summary>Indicates whether this instance and a specified object are equal.</summary><param name="obj">The object to compare with the current instance.</param><returns><see langword="true" /> if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.Communication.Chat.ChatAttachmentType.Equals(Azure.Communication.Chat.ChatAttachmentType)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary><param name="other">An object to compare with this object.</param><returns><see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.Communication.Chat.ChatAttachmentType.GetHashCode">
            <summary>Returns the hash code for this instance.</summary><returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:Azure.Communication.Chat.ChatAttachmentType.ToString">
            <summary>Returns the fully qualified type name of this instance.</summary><returns>The fully qualified type name.</returns>
        </member>
        <member name="T:Azure.Communication.Chat.ChatError">
            <summary> The Communication Services error. </summary>
        </member>
        <member name="M:Azure.Communication.Chat.ChatError.#ctor(System.String,System.String)">
            <summary> Initializes a new instance of <see cref="T:Azure.Communication.Chat.ChatError" />. </summary>
            <param name="code"> The error code. </param>
            <param name="message"> The error message. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="code" /> or <paramref name="message" /> is null. </exception>
        </member>
        <member name="M:Azure.Communication.Chat.ChatError.#ctor(System.String,System.String,System.String,System.Collections.Generic.IReadOnlyList{Azure.Communication.Chat.ChatError},Azure.Communication.Chat.ChatError)">
            <summary> Initializes a new instance of <see cref="T:Azure.Communication.Chat.ChatError" />. </summary>
            <param name="code"> The error code. </param>
            <param name="message"> The error message. </param>
            <param name="target"> The error target. </param>
            <param name="details"> Further details about specific errors that led to this error. </param>
            <param name="innerError"> The inner error if any. </param>
        </member>
        <member name="P:Azure.Communication.Chat.ChatError.Code">
            <summary> The error code. </summary>
        </member>
        <member name="P:Azure.Communication.Chat.ChatError.Message">
            <summary> The error message. </summary>
        </member>
        <member name="P:Azure.Communication.Chat.ChatError.Target">
            <summary> The error target. </summary>
        </member>
        <member name="P:Azure.Communication.Chat.ChatError.Details">
            <summary> Further details about specific errors that led to this error. </summary>
        </member>
        <member name="P:Azure.Communication.Chat.ChatError.InnerError">
            <summary> The inner error if any. </summary>
        </member>
        <member name="M:Azure.Communication.Chat.ChatError.FromResponse(Azure.Response)">
            <summary> Deserializes the model from a raw response. </summary>
            <param name="response"> The response to deserialize the model from. </param>
        </member>
        <member name="T:Azure.Communication.Chat.ChatErrorResponse">
            <summary> The Communication Services error. </summary>
        </member>
        <member name="M:Azure.Communication.Chat.ChatErrorResponse.#ctor(Azure.Communication.Chat.ChatError)">
            <summary> Initializes a new instance of <see cref="T:Azure.Communication.Chat.ChatErrorResponse" />. </summary>
            <param name="error"> The Communication Services error. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="error" /> is null. </exception>
        </member>
        <member name="P:Azure.Communication.Chat.ChatErrorResponse.Error">
            <summary> The Communication Services error. </summary>
        </member>
        <member name="M:Azure.Communication.Chat.ChatErrorResponse.FromResponse(Azure.Response)">
            <summary> Deserializes the model from a raw response. </summary>
            <param name="response"> The response to deserialize the model from. </param>
        </member>
        <member name="T:Azure.Communication.Chat.ChatMessageContentInternal">
            <summary> Content of a chat message. </summary>
        </member>
        <member name="M:Azure.Communication.Chat.ChatMessageContentInternal.#ctor">
            <summary> Initializes a new instance of <see cref="T:Azure.Communication.Chat.ChatMessageContentInternal" />. </summary>
        </member>
        <member name="M:Azure.Communication.Chat.ChatMessageContentInternal.#ctor(System.String,System.String,System.Collections.Generic.IReadOnlyList{Azure.Communication.Chat.ChatParticipantInternal},System.Collections.Generic.IReadOnlyList{Azure.Communication.Chat.ChatAttachmentInternal},Azure.Communication.CommunicationIdentifierModel)">
            <summary> Initializes a new instance of <see cref="T:Azure.Communication.Chat.ChatMessageContentInternal" />. </summary>
            <param name="message"> Chat message content for messages of types text or html. </param>
            <param name="topic"> Chat message content for messages of type topicUpdated. </param>
            <param name="participants"> Chat message content for messages of types participantAdded or participantRemoved. </param>
            <param name="attachments"> List of attachments for this message. </param>
            <param name="initiatorCommunicationIdentifier"> Identifies a participant in Azure Communication services. A participant is, for example, a phone number or an Azure communication user. This model is polymorphic: Apart from kind and rawId, at most one further property may be set which must match the kind enum value. </param>
        </member>
        <member name="P:Azure.Communication.Chat.ChatMessageContentInternal.Message">
            <summary> Chat message content for messages of types text or html. </summary>
        </member>
        <member name="P:Azure.Communication.Chat.ChatMessageContentInternal.Topic">
            <summary> Chat message content for messages of type topicUpdated. </summary>
        </member>
        <member name="P:Azure.Communication.Chat.ChatMessageContentInternal.Participants">
            <summary> Chat message content for messages of types participantAdded or participantRemoved. </summary>
        </member>
        <member name="P:Azure.Communication.Chat.ChatMessageContentInternal.Attachments">
            <summary> List of attachments for this message. </summary>
        </member>
        <member name="P:Azure.Communication.Chat.ChatMessageContentInternal.InitiatorCommunicationIdentifier">
            <summary> Identifies a participant in Azure Communication services. A participant is, for example, a phone number or an Azure communication user. This model is polymorphic: Apart from kind and rawId, at most one further property may be set which must match the kind enum value. </summary>
        </member>
        <member name="M:Azure.Communication.Chat.ChatMessageContentInternal.FromResponse(Azure.Response)">
            <summary> Deserializes the model from a raw response. </summary>
            <param name="response"> The response to deserialize the model from. </param>
        </member>
        <member name="T:Azure.Communication.Chat.ChatMessageInternal">
            <summary> Chat message. </summary>
        </member>
        <member name="M:Azure.Communication.Chat.ChatMessageInternal.#ctor(System.String,Azure.Communication.Chat.ChatMessageType,System.String,System.String,System.DateTimeOffset)">
            <summary> Initializes a new instance of <see cref="T:Azure.Communication.Chat.ChatMessageInternal" />. </summary>
            <param name="id"> The id of the chat message. This id is server generated. </param>
            <param name="type"> The chat message type. </param>
            <param name="sequenceId"> Sequence of the chat message in the conversation. </param>
            <param name="version"> Version of the chat message. </param>
            <param name="createdOn"> The timestamp when the chat message arrived at the server. The timestamp is in RFC3339 format: `yyyy-MM-ddTHH:mm:ssZ`. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="id" />, <paramref name="sequenceId" /> or <paramref name="version" /> is null. </exception>
        </member>
        <member name="M:Azure.Communication.Chat.ChatMessageInternal.#ctor(System.String,Azure.Communication.Chat.ChatMessageType,System.String,System.String,Azure.Communication.Chat.ChatMessageContentInternal,System.String,System.DateTimeOffset,Azure.Communication.CommunicationIdentifierModel,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})">
            <summary> Initializes a new instance of <see cref="T:Azure.Communication.Chat.ChatMessageInternal" />. </summary>
            <param name="id"> The id of the chat message. This id is server generated. </param>
            <param name="type"> The chat message type. </param>
            <param name="sequenceId"> Sequence of the chat message in the conversation. </param>
            <param name="version"> Version of the chat message. </param>
            <param name="content"> Content of a chat message. </param>
            <param name="senderDisplayName"> The display name of the chat message sender. This property is used to populate sender name for push notifications. </param>
            <param name="createdOn"> The timestamp when the chat message arrived at the server. The timestamp is in RFC3339 format: `yyyy-MM-ddTHH:mm:ssZ`. </param>
            <param name="senderCommunicationIdentifier"> Identifies a participant in Azure Communication services. A participant is, for example, a phone number or an Azure communication user. This model is polymorphic: Apart from kind and rawId, at most one further property may be set which must match the kind enum value. </param>
            <param name="deletedOn"> The timestamp (if applicable) when the message was deleted. The timestamp is in RFC3339 format: `yyyy-MM-ddTHH:mm:ssZ`. </param>
            <param name="editedOn"> The last timestamp (if applicable) when the message was edited. The timestamp is in RFC3339 format: `yyyy-MM-ddTHH:mm:ssZ`. </param>
            <param name="metadata"> Message metadata. </param>
        </member>
        <member name="P:Azure.Communication.Chat.ChatMessageInternal.Id">
            <summary> The id of the chat message. This id is server generated. </summary>
        </member>
        <member name="P:Azure.Communication.Chat.ChatMessageInternal.Type">
            <summary> The chat message type. </summary>
        </member>
        <member name="P:Azure.Communication.Chat.ChatMessageInternal.SequenceId">
            <summary> Sequence of the chat message in the conversation. </summary>
        </member>
        <member name="P:Azure.Communication.Chat.ChatMessageInternal.Version">
            <summary> Version of the chat message. </summary>
        </member>
        <member name="P:Azure.Communication.Chat.ChatMessageInternal.Content">
            <summary> Content of a chat message. </summary>
        </member>
        <member name="P:Azure.Communication.Chat.ChatMessageInternal.SenderDisplayName">
            <summary> The display name of the chat message sender. This property is used to populate sender name for push notifications. </summary>
        </member>
        <member name="P:Azure.Communication.Chat.ChatMessageInternal.CreatedOn">
            <summary> The timestamp when the chat message arrived at the server. The timestamp is in RFC3339 format: `yyyy-MM-ddTHH:mm:ssZ`. </summary>
        </member>
        <member name="P:Azure.Communication.Chat.ChatMessageInternal.SenderCommunicationIdentifier">
            <summary> Identifies a participant in Azure Communication services. A participant is, for example, a phone number or an Azure communication user. This model is polymorphic: Apart from kind and rawId, at most one further property may be set which must match the kind enum value. </summary>
        </member>
        <member name="P:Azure.Communication.Chat.ChatMessageInternal.DeletedOn">
            <summary> The timestamp (if applicable) when the message was deleted. The timestamp is in RFC3339 format: `yyyy-MM-ddTHH:mm:ssZ`. </summary>
        </member>
        <member name="P:Azure.Communication.Chat.ChatMessageInternal.EditedOn">
            <summary> The last timestamp (if applicable) when the message was edited. The timestamp is in RFC3339 format: `yyyy-MM-ddTHH:mm:ssZ`. </summary>
        </member>
        <member name="P:Azure.Communication.Chat.ChatMessageInternal.Metadata">
            <summary> Message metadata. </summary>
        </member>
        <member name="M:Azure.Communication.Chat.ChatMessageInternal.FromResponse(Azure.Response)">
            <summary> Deserializes the model from a raw response. </summary>
            <param name="response"> The response to deserialize the model from. </param>
        </member>
        <member name="T:Azure.Communication.Chat.ChatMessageReadReceiptInternal">
            <summary> A chat message read receipt indicates the time a chat message was read by a recipient. </summary>
        </member>
        <member name="M:Azure.Communication.Chat.ChatMessageReadReceiptInternal.#ctor(Azure.Communication.CommunicationIdentifierModel,System.String,System.DateTimeOffset)">
            <summary> Initializes a new instance of <see cref="T:Azure.Communication.Chat.ChatMessageReadReceiptInternal" />. </summary>
            <param name="senderCommunicationIdentifier"> Identifies a participant in Azure Communication services. A participant is, for example, a phone number or an Azure communication user. This model is polymorphic: Apart from kind and rawId, at most one further property may be set which must match the kind enum value. </param>
            <param name="chatMessageId"> Id of the chat message that has been read. This id is generated by the server. </param>
            <param name="readOn"> The time at which the message was read. The timestamp is in RFC3339 format: `yyyy-MM-ddTHH:mm:ssZ`. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="senderCommunicationIdentifier" /> or <paramref name="chatMessageId" /> is null. </exception>
        </member>
        <member name="P:Azure.Communication.Chat.ChatMessageReadReceiptInternal.SenderCommunicationIdentifier">
            <summary> Identifies a participant in Azure Communication services. A participant is, for example, a phone number or an Azure communication user. This model is polymorphic: Apart from kind and rawId, at most one further property may be set which must match the kind enum value. </summary>
        </member>
        <member name="P:Azure.Communication.Chat.ChatMessageReadReceiptInternal.ChatMessageId">
            <summary> Id of the chat message that has been read. This id is generated by the server. </summary>
        </member>
        <member name="P:Azure.Communication.Chat.ChatMessageReadReceiptInternal.ReadOn">
            <summary> The time at which the message was read. The timestamp is in RFC3339 format: `yyyy-MM-ddTHH:mm:ssZ`. </summary>
        </member>
        <member name="M:Azure.Communication.Chat.ChatMessageReadReceiptInternal.FromResponse(Azure.Response)">
            <summary> Deserializes the model from a raw response. </summary>
            <param name="response"> The response to deserialize the model from. </param>
        </member>
        <member name="T:Azure.Communication.Chat.ChatMessageReadReceiptsCollection">
            <summary> A paged collection of chat message read receipts. </summary>
        </member>
        <member name="M:Azure.Communication.Chat.ChatMessageReadReceiptsCollection.#ctor(System.Collections.Generic.IEnumerable{Azure.Communication.Chat.ChatMessageReadReceiptInternal})">
            <summary> Initializes a new instance of <see cref="T:Azure.Communication.Chat.ChatMessageReadReceiptsCollection" />. </summary>
            <param name="value"> Collection of chat message read receipts. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="value" /> is null. </exception>
        </member>
        <member name="M:Azure.Communication.Chat.ChatMessageReadReceiptsCollection.#ctor(System.Collections.Generic.IReadOnlyList{Azure.Communication.Chat.ChatMessageReadReceiptInternal},System.String)">
            <summary> Initializes a new instance of <see cref="T:Azure.Communication.Chat.ChatMessageReadReceiptsCollection" />. </summary>
            <param name="value"> Collection of chat message read receipts. </param>
            <param name="nextLink"> If there are more chat message read receipts that can be retrieved, the next link will be populated. </param>
        </member>
        <member name="P:Azure.Communication.Chat.ChatMessageReadReceiptsCollection.Value">
            <summary> Collection of chat message read receipts. </summary>
        </member>
        <member name="P:Azure.Communication.Chat.ChatMessageReadReceiptsCollection.NextLink">
            <summary> If there are more chat message read receipts that can be retrieved, the next link will be populated. </summary>
        </member>
        <member name="M:Azure.Communication.Chat.ChatMessageReadReceiptsCollection.FromResponse(Azure.Response)">
            <summary> Deserializes the model from a raw response. </summary>
            <param name="response"> The response to deserialize the model from. </param>
        </member>
        <member name="T:Azure.Communication.Chat.ChatMessagesCollection">
            <summary> Collection of chat messages for a particular chat thread. </summary>
        </member>
        <member name="M:Azure.Communication.Chat.ChatMessagesCollection.#ctor(System.Collections.Generic.IEnumerable{Azure.Communication.Chat.ChatMessageInternal})">
            <summary> Initializes a new instance of <see cref="T:Azure.Communication.Chat.ChatMessagesCollection" />. </summary>
            <param name="value"> Collection of chat messages. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="value" /> is null. </exception>
        </member>
        <member name="M:Azure.Communication.Chat.ChatMessagesCollection.#ctor(System.Collections.Generic.IReadOnlyList{Azure.Communication.Chat.ChatMessageInternal},System.String)">
            <summary> Initializes a new instance of <see cref="T:Azure.Communication.Chat.ChatMessagesCollection" />. </summary>
            <param name="value"> Collection of chat messages. </param>
            <param name="nextLink"> If there are more chat messages that can be retrieved, the next link will be populated. </param>
        </member>
        <member name="P:Azure.Communication.Chat.ChatMessagesCollection.Value">
            <summary> Collection of chat messages. </summary>
        </member>
        <member name="P:Azure.Communication.Chat.ChatMessagesCollection.NextLink">
            <summary> If there are more chat messages that can be retrieved, the next link will be populated. </summary>
        </member>
        <member name="M:Azure.Communication.Chat.ChatMessagesCollection.FromResponse(Azure.Response)">
            <summary> Deserializes the model from a raw response. </summary>
            <param name="response"> The response to deserialize the model from. </param>
        </member>
        <member name="T:Azure.Communication.Chat.ChatMessageType">
            <summary> The chat message type. </summary>
        </member>
        <member name="M:Azure.Communication.Chat.ChatMessageType.#ctor(System.String)">
            <summary> Initializes a new instance of <see cref="T:Azure.Communication.Chat.ChatMessageType" />. </summary>
            <exception cref="T:System.ArgumentNullException"> <paramref name="value" /> is null. </exception>
        </member>
        <member name="P:Azure.Communication.Chat.ChatMessageType.Text">
            <summary> text. </summary>
        </member>
        <member name="P:Azure.Communication.Chat.ChatMessageType.Html">
            <summary> html. </summary>
        </member>
        <member name="P:Azure.Communication.Chat.ChatMessageType.TopicUpdated">
            <summary> topicUpdated. </summary>
        </member>
        <member name="P:Azure.Communication.Chat.ChatMessageType.ParticipantAdded">
            <summary> participantAdded. </summary>
        </member>
        <member name="P:Azure.Communication.Chat.ChatMessageType.ParticipantRemoved">
            <summary> participantRemoved. </summary>
        </member>
        <member name="M:Azure.Communication.Chat.ChatMessageType.op_Equality(Azure.Communication.Chat.ChatMessageType,Azure.Communication.Chat.ChatMessageType)">
            <summary> Determines if two <see cref="T:Azure.Communication.Chat.ChatMessageType" /> values are the same. </summary>
        </member>
        <member name="M:Azure.Communication.Chat.ChatMessageType.op_Inequality(Azure.Communication.Chat.ChatMessageType,Azure.Communication.Chat.ChatMessageType)">
            <summary> Determines if two <see cref="T:Azure.Communication.Chat.ChatMessageType" /> values are not the same. </summary>
        </member>
        <member name="M:Azure.Communication.Chat.ChatMessageType.op_Implicit(System.String)~Azure.Communication.Chat.ChatMessageType">
            <summary> Converts a string to a <see cref="T:Azure.Communication.Chat.ChatMessageType" />. </summary>
        </member>
        <member name="M:Azure.Communication.Chat.ChatMessageType.Equals(System.Object)">
            <summary>Indicates whether this instance and a specified object are equal.</summary><param name="obj">The object to compare with the current instance.</param><returns><see langword="true" /> if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.Communication.Chat.ChatMessageType.Equals(Azure.Communication.Chat.ChatMessageType)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary><param name="other">An object to compare with this object.</param><returns><see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.Communication.Chat.ChatMessageType.GetHashCode">
            <summary>Returns the hash code for this instance.</summary><returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:Azure.Communication.Chat.ChatMessageType.ToString">
            <summary>Returns the fully qualified type name of this instance.</summary><returns>The fully qualified type name.</returns>
        </member>
        <member name="T:Azure.Communication.Chat.ChatParticipantInternal">
            <summary> A participant of the chat thread. </summary>
        </member>
        <member name="M:Azure.Communication.Chat.ChatParticipantInternal.#ctor(Azure.Communication.CommunicationIdentifierModel)">
            <summary> Initializes a new instance of <see cref="T:Azure.Communication.Chat.ChatParticipantInternal" />. </summary>
            <param name="communicationIdentifier"> Identifies a participant in Azure Communication services. A participant is, for example, a phone number or an Azure communication user. This model is polymorphic: Apart from kind and rawId, at most one further property may be set which must match the kind enum value. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="communicationIdentifier" /> is null. </exception>
        </member>
        <member name="M:Azure.Communication.Chat.ChatParticipantInternal.#ctor(Azure.Communication.CommunicationIdentifierModel,System.String,System.Nullable{System.DateTimeOffset})">
            <summary> Initializes a new instance of <see cref="T:Azure.Communication.Chat.ChatParticipantInternal" />. </summary>
            <param name="communicationIdentifier"> Identifies a participant in Azure Communication services. A participant is, for example, a phone number or an Azure communication user. This model is polymorphic: Apart from kind and rawId, at most one further property may be set which must match the kind enum value. </param>
            <param name="displayName"> Display name for the chat participant. </param>
            <param name="shareHistoryTime"> Time from which the chat history is shared with the participant. The timestamp is in RFC3339 format: `yyyy-MM-ddTHH:mm:ssZ`. </param>
        </member>
        <member name="P:Azure.Communication.Chat.ChatParticipantInternal.CommunicationIdentifier">
            <summary> Identifies a participant in Azure Communication services. A participant is, for example, a phone number or an Azure communication user. This model is polymorphic: Apart from kind and rawId, at most one further property may be set which must match the kind enum value. </summary>
        </member>
        <member name="P:Azure.Communication.Chat.ChatParticipantInternal.DisplayName">
            <summary> Display name for the chat participant. </summary>
        </member>
        <member name="P:Azure.Communication.Chat.ChatParticipantInternal.ShareHistoryTime">
            <summary> Time from which the chat history is shared with the participant. The timestamp is in RFC3339 format: `yyyy-MM-ddTHH:mm:ssZ`. </summary>
        </member>
        <member name="M:Azure.Communication.Chat.ChatParticipantInternal.FromResponse(Azure.Response)">
            <summary> Deserializes the model from a raw response. </summary>
            <param name="response"> The response to deserialize the model from. </param>
        </member>
        <member name="M:Azure.Communication.Chat.ChatParticipantInternal.ToRequestContent">
            <summary> Convert into a <see cref="T:Azure.Core.RequestContent" />. </summary>
        </member>
        <member name="T:Azure.Communication.Chat.ChatParticipantsCollection">
            <summary> Collection of participants belong to a particular thread. </summary>
        </member>
        <member name="M:Azure.Communication.Chat.ChatParticipantsCollection.#ctor(System.Collections.Generic.IEnumerable{Azure.Communication.Chat.ChatParticipantInternal})">
            <summary> Initializes a new instance of <see cref="T:Azure.Communication.Chat.ChatParticipantsCollection" />. </summary>
            <param name="value"> Chat participants. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="value" /> is null. </exception>
        </member>
        <member name="M:Azure.Communication.Chat.ChatParticipantsCollection.#ctor(System.Collections.Generic.IReadOnlyList{Azure.Communication.Chat.ChatParticipantInternal},System.String)">
            <summary> Initializes a new instance of <see cref="T:Azure.Communication.Chat.ChatParticipantsCollection" />. </summary>
            <param name="value"> Chat participants. </param>
            <param name="nextLink"> If there are more chat participants that can be retrieved, the next link will be populated. </param>
        </member>
        <member name="P:Azure.Communication.Chat.ChatParticipantsCollection.Value">
            <summary> Chat participants. </summary>
        </member>
        <member name="P:Azure.Communication.Chat.ChatParticipantsCollection.NextLink">
            <summary> If there are more chat participants that can be retrieved, the next link will be populated. </summary>
        </member>
        <member name="M:Azure.Communication.Chat.ChatParticipantsCollection.FromResponse(Azure.Response)">
            <summary> Deserializes the model from a raw response. </summary>
            <param name="response"> The response to deserialize the model from. </param>
        </member>
        <member name="T:Azure.Communication.Chat.ChatThreadItem">
            <summary> Summary information of a chat thread. </summary>
        </member>
        <member name="M:Azure.Communication.Chat.ChatThreadItem.#ctor(System.String,System.String)">
            <summary> Initializes a new instance of <see cref="T:Azure.Communication.Chat.ChatThreadItem" />. </summary>
            <param name="id"> Chat thread id. </param>
            <param name="topic"> Chat thread topic. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="id" /> or <paramref name="topic" /> is null. </exception>
        </member>
        <member name="M:Azure.Communication.Chat.ChatThreadItem.#ctor(System.String,System.String,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
            <summary> Initializes a new instance of <see cref="T:Azure.Communication.Chat.ChatThreadItem" />. </summary>
            <param name="id"> Chat thread id. </param>
            <param name="topic"> Chat thread topic. </param>
            <param name="deletedOn"> The timestamp when the chat thread was deleted. The timestamp is in RFC3339 format: `yyyy-MM-ddTHH:mm:ssZ`. </param>
            <param name="lastMessageReceivedOn"> The timestamp when the last message arrived at the server. The timestamp is in RFC3339 format: `yyyy-MM-ddTHH:mm:ssZ`. </param>
        </member>
        <member name="P:Azure.Communication.Chat.ChatThreadItem.Id">
            <summary> Chat thread id. </summary>
        </member>
        <member name="P:Azure.Communication.Chat.ChatThreadItem.Topic">
            <summary> Chat thread topic. </summary>
        </member>
        <member name="P:Azure.Communication.Chat.ChatThreadItem.DeletedOn">
            <summary> The timestamp when the chat thread was deleted. The timestamp is in RFC3339 format: `yyyy-MM-ddTHH:mm:ssZ`. </summary>
        </member>
        <member name="P:Azure.Communication.Chat.ChatThreadItem.LastMessageReceivedOn">
            <summary> The timestamp when the last message arrived at the server. The timestamp is in RFC3339 format: `yyyy-MM-ddTHH:mm:ssZ`. </summary>
        </member>
        <member name="M:Azure.Communication.Chat.ChatThreadItem.FromResponse(Azure.Response)">
            <summary> Deserializes the model from a raw response. </summary>
            <param name="response"> The response to deserialize the model from. </param>
        </member>
        <member name="T:Azure.Communication.Chat.ChatThreadPropertiesInternal">
            <summary> Chat thread. </summary>
        </member>
        <member name="M:Azure.Communication.Chat.ChatThreadPropertiesInternal.#ctor(System.String,System.String,System.DateTimeOffset,Azure.Communication.CommunicationIdentifierModel)">
            <summary> Initializes a new instance of <see cref="T:Azure.Communication.Chat.ChatThreadPropertiesInternal" />. </summary>
            <param name="id"> Chat thread id. </param>
            <param name="topic"> Chat thread topic. </param>
            <param name="createdOn"> The timestamp when the chat thread was created. The timestamp is in RFC3339 format: `yyyy-MM-ddTHH:mm:ssZ`. </param>
            <param name="createdByCommunicationIdentifier"> Identifies a participant in Azure Communication services. A participant is, for example, a phone number or an Azure communication user. This model is polymorphic: Apart from kind and rawId, at most one further property may be set which must match the kind enum value. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="id" />, <paramref name="topic" /> or <paramref name="createdByCommunicationIdentifier" /> is null. </exception>
        </member>
        <member name="M:Azure.Communication.Chat.ChatThreadPropertiesInternal.#ctor(System.String,System.String,System.DateTimeOffset,Azure.Communication.CommunicationIdentifierModel,System.Nullable{System.DateTimeOffset})">
            <summary> Initializes a new instance of <see cref="T:Azure.Communication.Chat.ChatThreadPropertiesInternal" />. </summary>
            <param name="id"> Chat thread id. </param>
            <param name="topic"> Chat thread topic. </param>
            <param name="createdOn"> The timestamp when the chat thread was created. The timestamp is in RFC3339 format: `yyyy-MM-ddTHH:mm:ssZ`. </param>
            <param name="createdByCommunicationIdentifier"> Identifies a participant in Azure Communication services. A participant is, for example, a phone number or an Azure communication user. This model is polymorphic: Apart from kind and rawId, at most one further property may be set which must match the kind enum value. </param>
            <param name="deletedOn"> The timestamp when the chat thread was deleted. The timestamp is in RFC3339 format: `yyyy-MM-ddTHH:mm:ssZ`. </param>
        </member>
        <member name="P:Azure.Communication.Chat.ChatThreadPropertiesInternal.Id">
            <summary> Chat thread id. </summary>
        </member>
        <member name="P:Azure.Communication.Chat.ChatThreadPropertiesInternal.Topic">
            <summary> Chat thread topic. </summary>
        </member>
        <member name="P:Azure.Communication.Chat.ChatThreadPropertiesInternal.CreatedOn">
            <summary> The timestamp when the chat thread was created. The timestamp is in RFC3339 format: `yyyy-MM-ddTHH:mm:ssZ`. </summary>
        </member>
        <member name="P:Azure.Communication.Chat.ChatThreadPropertiesInternal.CreatedByCommunicationIdentifier">
            <summary> Identifies a participant in Azure Communication services. A participant is, for example, a phone number or an Azure communication user. This model is polymorphic: Apart from kind and rawId, at most one further property may be set which must match the kind enum value. </summary>
        </member>
        <member name="P:Azure.Communication.Chat.ChatThreadPropertiesInternal.DeletedOn">
            <summary> The timestamp when the chat thread was deleted. The timestamp is in RFC3339 format: `yyyy-MM-ddTHH:mm:ssZ`. </summary>
        </member>
        <member name="M:Azure.Communication.Chat.ChatThreadPropertiesInternal.FromResponse(Azure.Response)">
            <summary> Deserializes the model from a raw response. </summary>
            <param name="response"> The response to deserialize the model from. </param>
        </member>
        <member name="T:Azure.Communication.Chat.ChatThreadsItemCollection">
            <summary> Collection of chat threads. </summary>
        </member>
        <member name="M:Azure.Communication.Chat.ChatThreadsItemCollection.#ctor(System.Collections.Generic.IEnumerable{Azure.Communication.Chat.ChatThreadItem})">
            <summary> Initializes a new instance of <see cref="T:Azure.Communication.Chat.ChatThreadsItemCollection" />. </summary>
            <param name="value"> Collection of chat threads. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="value" /> is null. </exception>
        </member>
        <member name="M:Azure.Communication.Chat.ChatThreadsItemCollection.#ctor(System.Collections.Generic.IReadOnlyList{Azure.Communication.Chat.ChatThreadItem},System.String)">
            <summary> Initializes a new instance of <see cref="T:Azure.Communication.Chat.ChatThreadsItemCollection" />. </summary>
            <param name="value"> Collection of chat threads. </param>
            <param name="nextLink"> If there are more chat threads that can be retrieved, the next link will be populated. </param>
        </member>
        <member name="P:Azure.Communication.Chat.ChatThreadsItemCollection.Value">
            <summary> Collection of chat threads. </summary>
        </member>
        <member name="P:Azure.Communication.Chat.ChatThreadsItemCollection.NextLink">
            <summary> If there are more chat threads that can be retrieved, the next link will be populated. </summary>
        </member>
        <member name="M:Azure.Communication.Chat.ChatThreadsItemCollection.FromResponse(Azure.Response)">
            <summary> Deserializes the model from a raw response. </summary>
            <param name="response"> The response to deserialize the model from. </param>
        </member>
        <member name="T:Azure.Communication.Chat.CreateChatThreadRequest">
            <summary> Request payload for creating a chat thread. </summary>
        </member>
        <member name="M:Azure.Communication.Chat.CreateChatThreadRequest.#ctor(System.String)">
            <summary> Initializes a new instance of <see cref="T:Azure.Communication.Chat.CreateChatThreadRequest" />. </summary>
            <param name="topic"> The chat thread topic. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="topic" /> is null. </exception>
        </member>
        <member name="M:Azure.Communication.Chat.CreateChatThreadRequest.#ctor(System.String,System.Collections.Generic.IList{Azure.Communication.Chat.ChatParticipantInternal})">
            <summary> Initializes a new instance of <see cref="T:Azure.Communication.Chat.CreateChatThreadRequest" />. </summary>
            <param name="topic"> The chat thread topic. </param>
            <param name="participants"> Participants to be added to the chat thread. </param>
        </member>
        <member name="P:Azure.Communication.Chat.CreateChatThreadRequest.Topic">
            <summary> The chat thread topic. </summary>
        </member>
        <member name="P:Azure.Communication.Chat.CreateChatThreadRequest.Participants">
            <summary> Participants to be added to the chat thread. </summary>
        </member>
        <member name="M:Azure.Communication.Chat.CreateChatThreadRequest.ToRequestContent">
            <summary> Convert into a <see cref="T:Azure.Core.RequestContent" />. </summary>
        </member>
        <member name="T:Azure.Communication.Chat.CreateChatThreadResultInternal">
            <summary> Result of the create chat thread operation. </summary>
        </member>
        <member name="M:Azure.Communication.Chat.CreateChatThreadResultInternal.#ctor">
            <summary> Initializes a new instance of <see cref="T:Azure.Communication.Chat.CreateChatThreadResultInternal" />. </summary>
        </member>
        <member name="M:Azure.Communication.Chat.CreateChatThreadResultInternal.#ctor(Azure.Communication.Chat.ChatThreadPropertiesInternal,System.Collections.Generic.IReadOnlyList{Azure.Communication.Chat.ChatError})">
            <summary> Initializes a new instance of <see cref="T:Azure.Communication.Chat.CreateChatThreadResultInternal" />. </summary>
            <param name="chatThread"> Chat thread. </param>
            <param name="invalidParticipants"> The participants that failed to be added to the chat thread. </param>
        </member>
        <member name="P:Azure.Communication.Chat.CreateChatThreadResultInternal.ChatThread">
            <summary> Chat thread. </summary>
        </member>
        <member name="P:Azure.Communication.Chat.CreateChatThreadResultInternal.InvalidParticipants">
            <summary> The participants that failed to be added to the chat thread. </summary>
        </member>
        <member name="M:Azure.Communication.Chat.CreateChatThreadResultInternal.FromResponse(Azure.Response)">
            <summary> Deserializes the model from a raw response. </summary>
            <param name="response"> The response to deserialize the model from. </param>
        </member>
        <member name="T:Azure.Communication.Chat.SendChatMessageRequest">
            <summary> Details of the message to send. </summary>
        </member>
        <member name="M:Azure.Communication.Chat.SendChatMessageRequest.#ctor(System.String)">
            <summary> Initializes a new instance of <see cref="T:Azure.Communication.Chat.SendChatMessageRequest" />. </summary>
            <param name="content"> Chat message content. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="content" /> is null. </exception>
        </member>
        <member name="M:Azure.Communication.Chat.SendChatMessageRequest.#ctor(System.String,System.String,System.Nullable{Azure.Communication.Chat.ChatMessageType},System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary> Initializes a new instance of <see cref="T:Azure.Communication.Chat.SendChatMessageRequest" />. </summary>
            <param name="content"> Chat message content. </param>
            <param name="senderDisplayName"> The display name of the chat message sender. This property is used to populate sender name for push notifications. </param>
            <param name="type"> The chat message type. </param>
            <param name="metadata"> Message metadata. </param>
        </member>
        <member name="P:Azure.Communication.Chat.SendChatMessageRequest.Content">
            <summary> Chat message content. </summary>
        </member>
        <member name="P:Azure.Communication.Chat.SendChatMessageRequest.SenderDisplayName">
            <summary> The display name of the chat message sender. This property is used to populate sender name for push notifications. </summary>
        </member>
        <member name="P:Azure.Communication.Chat.SendChatMessageRequest.Type">
            <summary> The chat message type. </summary>
        </member>
        <member name="P:Azure.Communication.Chat.SendChatMessageRequest.Metadata">
            <summary> Message metadata. </summary>
        </member>
        <member name="M:Azure.Communication.Chat.SendChatMessageRequest.ToRequestContent">
            <summary> Convert into a <see cref="T:Azure.Core.RequestContent" />. </summary>
        </member>
        <member name="T:Azure.Communication.Chat.SendChatMessageResultInternal">
            <summary> Result of the send message operation. </summary>
        </member>
        <member name="M:Azure.Communication.Chat.SendChatMessageResultInternal.#ctor(System.String)">
            <summary> Initializes a new instance of <see cref="T:Azure.Communication.Chat.SendChatMessageResultInternal" />. </summary>
            <param name="id"> A server-generated message id. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="id" /> is null. </exception>
        </member>
        <member name="P:Azure.Communication.Chat.SendChatMessageResultInternal.Id">
            <summary> A server-generated message id. </summary>
        </member>
        <member name="M:Azure.Communication.Chat.SendChatMessageResultInternal.FromResponse(Azure.Response)">
            <summary> Deserializes the model from a raw response. </summary>
            <param name="response"> The response to deserialize the model from. </param>
        </member>
        <member name="T:Azure.Communication.Chat.SendReadReceiptRequest">
            <summary> Request payload for sending a read receipt. </summary>
        </member>
        <member name="M:Azure.Communication.Chat.SendReadReceiptRequest.#ctor(System.String)">
            <summary> Initializes a new instance of <see cref="T:Azure.Communication.Chat.SendReadReceiptRequest" />. </summary>
            <param name="chatMessageId"> Id of the latest chat message read by the user. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="chatMessageId" /> is null. </exception>
        </member>
        <member name="P:Azure.Communication.Chat.SendReadReceiptRequest.ChatMessageId">
            <summary> Id of the latest chat message read by the user. </summary>
        </member>
        <member name="M:Azure.Communication.Chat.SendReadReceiptRequest.ToRequestContent">
            <summary> Convert into a <see cref="T:Azure.Core.RequestContent" />. </summary>
        </member>
        <member name="T:Azure.Communication.Chat.SendTypingNotificationRequest">
            <summary> Request payload for typing notifications. </summary>
        </member>
        <member name="M:Azure.Communication.Chat.SendTypingNotificationRequest.#ctor">
            <summary> Initializes a new instance of <see cref="T:Azure.Communication.Chat.SendTypingNotificationRequest" />. </summary>
        </member>
        <member name="M:Azure.Communication.Chat.SendTypingNotificationRequest.#ctor(System.String)">
            <summary> Initializes a new instance of <see cref="T:Azure.Communication.Chat.SendTypingNotificationRequest" />. </summary>
            <param name="senderDisplayName"> The display name of the typing notification sender. This property is used to populate sender name for push notifications. </param>
        </member>
        <member name="P:Azure.Communication.Chat.SendTypingNotificationRequest.SenderDisplayName">
            <summary> The display name of the typing notification sender. This property is used to populate sender name for push notifications. </summary>
        </member>
        <member name="M:Azure.Communication.Chat.SendTypingNotificationRequest.ToRequestContent">
            <summary> Convert into a <see cref="T:Azure.Core.RequestContent" />. </summary>
        </member>
        <member name="T:Azure.Communication.Chat.UpdateChatMessageRequest">
            <summary> Request payload for updating a chat message. </summary>
        </member>
        <member name="M:Azure.Communication.Chat.UpdateChatMessageRequest.#ctor">
            <summary> Initializes a new instance of <see cref="T:Azure.Communication.Chat.UpdateChatMessageRequest" />. </summary>
        </member>
        <member name="M:Azure.Communication.Chat.UpdateChatMessageRequest.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary> Initializes a new instance of <see cref="T:Azure.Communication.Chat.UpdateChatMessageRequest" />. </summary>
            <param name="content"> Chat message content. </param>
            <param name="metadata"> Message metadata. </param>
        </member>
        <member name="P:Azure.Communication.Chat.UpdateChatMessageRequest.Content">
            <summary> Chat message content. </summary>
        </member>
        <member name="P:Azure.Communication.Chat.UpdateChatMessageRequest.Metadata">
            <summary> Message metadata. </summary>
        </member>
        <member name="M:Azure.Communication.Chat.UpdateChatMessageRequest.ToRequestContent">
            <summary> Convert into a <see cref="T:Azure.Core.RequestContent" />. </summary>
        </member>
        <member name="T:Azure.Communication.Chat.UpdateChatThreadRequest">
            <summary> Request payload for updating a chat thread. </summary>
        </member>
        <member name="M:Azure.Communication.Chat.UpdateChatThreadRequest.#ctor">
            <summary> Initializes a new instance of <see cref="T:Azure.Communication.Chat.UpdateChatThreadRequest" />. </summary>
        </member>
        <member name="M:Azure.Communication.Chat.UpdateChatThreadRequest.#ctor(System.String)">
            <summary> Initializes a new instance of <see cref="T:Azure.Communication.Chat.UpdateChatThreadRequest" />. </summary>
            <param name="topic"> Chat thread topic. </param>
        </member>
        <member name="P:Azure.Communication.Chat.UpdateChatThreadRequest.Topic">
            <summary> Chat thread topic. </summary>
        </member>
        <member name="M:Azure.Communication.Chat.UpdateChatThreadRequest.ToRequestContent">
            <summary> Convert into a <see cref="T:Azure.Core.RequestContent" />. </summary>
        </member>
        <member name="T:Azure.Communication.Chat.ChatAttachment">
            <summary> A member of the chat thread. </summary>
        </member>
        <member name="M:Azure.Communication.Chat.ChatAttachment.#ctor(System.String,Azure.Communication.Chat.ChatAttachmentType)">
            <summary> Initializes a new instance of ChatAttachmentInternal. </summary>
            <param name="id"> Id of the attachment. </param>
            <param name="attachmentType"> The type of attachment. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="id" /> is null. </exception>
        </member>
        <member name="M:Azure.Communication.Chat.ChatAttachment.#ctor(System.String,Azure.Communication.Chat.ChatAttachmentType,System.String,System.Uri,System.Uri)">
            <summary> Initializes a new instance of ChatAttachmentInternal. </summary>
            <param name="id"> Id of the attachment. </param>
            <param name="attachmentType"> The type of attachment. </param>
            <param name="name"> The name of the attachment content. </param>
            <param name="uri"> The URI where the attachment can be downloaded. </param>
            <param name="previewUri"> The URI where the preview of attachment can be downloaded. </param>
        </member>
        <member name="P:Azure.Communication.Chat.ChatAttachment.Id">
            <summary> Id of the attachment. </summary>
        </member>
        <member name="P:Azure.Communication.Chat.ChatAttachment.AttachmentType">
            <summary> The type of attachment. </summary>
        </member>
        <member name="P:Azure.Communication.Chat.ChatAttachment.Name">
            <summary> The name of the attachment content. </summary>
        </member>
        <member name="P:Azure.Communication.Chat.ChatAttachment.Uri">
            <summary> The URL where the attachment can be downloaded. </summary>
        </member>
        <member name="P:Azure.Communication.Chat.ChatAttachment.PreviewUri">
            <summary> The URL where the preview of attachment can be downloaded. </summary>
        </member>
        <member name="T:Azure.Communication.Chat.ChatMessage">
            <summary> Chat message. </summary>
        </member>
        <member name="P:Azure.Communication.Chat.ChatMessage.Id">
            <summary> The id of the chat message. This id is server generated. </summary>
        </member>
        <member name="P:Azure.Communication.Chat.ChatMessage.Type">
            <summary> The chat message type. </summary>
        </member>
        <member name="P:Azure.Communication.Chat.ChatMessage.SequenceId">
            <summary> Sequence of the chat message in the conversation. </summary>
        </member>
        <member name="P:Azure.Communication.Chat.ChatMessage.Version">
            <summary> Version of the chat message. </summary>
        </member>
        <member name="P:Azure.Communication.Chat.ChatMessage.Content">
            <summary> Content of a chat message. </summary>
        </member>
        <member name="P:Azure.Communication.Chat.ChatMessage.SenderDisplayName">
            <summary> The display name of the chat message sender. This property is used to populate sender name for push notifications. </summary>
        </member>
        <member name="P:Azure.Communication.Chat.ChatMessage.CreatedOn">
            <summary> The timestamp when the chat message arrived at the server. The timestamp is in RFC3339 format: `yyyy-MM-ddTHH:mm:ssZ`. </summary>
        </member>
        <member name="P:Azure.Communication.Chat.ChatMessage.Sender">
            <summary> The identifier of the chat message sender. </summary>
        </member>
        <member name="P:Azure.Communication.Chat.ChatMessage.DeletedOn">
            <summary> The timestamp (if applicable) when the message was deleted. The timestamp is in RFC3339 format: `yyyy-MM-ddTHH:mm:ssZ`. </summary>
        </member>
        <member name="P:Azure.Communication.Chat.ChatMessage.EditedOn">
            <summary> The last timestamp (if applicable) when the message was edited. The timestamp is in RFC3339 format: `yyyy-MM-ddTHH:mm:ssZ`. </summary>
        </member>
        <member name="P:Azure.Communication.Chat.ChatMessage.Metadata">
            <summary> Properties </summary>
        </member>
        <member name="T:Azure.Communication.Chat.ChatMessageContent">
            <summary> Initializes a new instance of ChatMessageContent. </summary>
        </member>
        <member name="P:Azure.Communication.Chat.ChatMessageContent.Message">
            <summary> Chat message content for type 'text' or 'html' messages. </summary>
        </member>
        <member name="P:Azure.Communication.Chat.ChatMessageContent.Topic">
            <summary> Chat message content for type 'topicUpdated' messages. </summary>
        </member>
        <member name="P:Azure.Communication.Chat.ChatMessageContent.Participants">
            <summary> Chat message content for type 'participantAdded' or 'participantRemoved' messages. </summary>
        </member>
        <member name="P:Azure.Communication.Chat.ChatMessageContent.Attachments">
            <summary> List of attachments for this message. </summary>
        </member>
        <member name="P:Azure.Communication.Chat.ChatMessageContent.Initiator">
            <summary> Chat message content for type 'participantAdded' or 'participantRemoved' messages. </summary>
        </member>
        <member name="T:Azure.Communication.Chat.ChatMessageReadReceipt">
            <summary> A chat message read receipt indicates the time a chat message was read by a recipient. </summary>
        </member>
        <member name="P:Azure.Communication.Chat.ChatMessageReadReceipt.Sender">
            <summary> Identifies a participant in Azure Communication services. A participant is, for example, a phone number or an Azure communication user. This model must be interpreted as a union: Apart from rawId, at most one further property may be set. </summary>
        </member>
        <member name="P:Azure.Communication.Chat.ChatMessageReadReceipt.ChatMessageId">
            <summary> Id of the chat message that has been read. This id is generated by the server. </summary>
        </member>
        <member name="P:Azure.Communication.Chat.ChatMessageReadReceipt.ReadOn">
            <summary> The time at which the message was read. The timestamp is in RFC3339 format: `yyyy-MM-ddTHH:mm:ssZ`. </summary>
        </member>
        <member name="T:Azure.Communication.Chat.ChatParticipant">
            <summary> A member of the chat thread. </summary>
        </member>
        <member name="M:Azure.Communication.Chat.ChatParticipant.#ctor(Azure.Communication.CommunicationIdentifier)">
            <summary>
             A member of the chat thread.
            </summary>
            <param name="identifier">Instance of <see cref="T:Azure.Communication.CommunicationIdentifier" />.</param>
        </member>
        <member name="P:Azure.Communication.Chat.ChatParticipant.User">
            <summary>Instance of <see cref="T:Azure.Communication.CommunicationIdentifier" />. </summary>
        </member>
        <member name="P:Azure.Communication.Chat.ChatParticipant.DisplayName">
            <summary> Display name for the chat thread member. </summary>
        </member>
        <member name="P:Azure.Communication.Chat.ChatParticipant.ShareHistoryTime">
            <summary> Time from which the chat history is shared with the member. The timestamp is in ISO8601 format: `yyyy-MM-ddTHH:mm:ssZ`. </summary>
        </member>
        <member name="T:Azure.Communication.Chat.ChatThreadProperties">
            <summary>The Chat Thread Properties.</summary>
        </member>
        <member name="P:Azure.Communication.Chat.ChatThreadProperties.Id">
            <summary> Chat thread id. </summary>
        </member>
        <member name="P:Azure.Communication.Chat.ChatThreadProperties.Topic">
            <summary> Chat thread topic. </summary>
        </member>
        <member name="P:Azure.Communication.Chat.ChatThreadProperties.CreatedOn">
            <summary> The timestamp when the chat thread was created. The timestamp is in ISO8601 format: `yyyy-MM-ddTHH:mm:ssZ`. </summary>
        </member>
        <member name="P:Azure.Communication.Chat.ChatThreadProperties.CreatedBy">
            <summary> Identifier of the chat thread owner. </summary>
        </member>
        <member name="P:Azure.Communication.Chat.ChatThreadProperties.DeletedOn">
            <summary>The timestamp when the chat thread was deleted. The timestamp is in RFC3339 format: `yyyy-MM-ddTHH:mm:ssZ`. </summary>
        </member>
        <member name="T:Azure.Communication.Chat.CreateChatThreadResult">
            <summary> Result of the create chat thread operation. </summary>
        </member>
        <member name="M:Azure.Communication.Chat.CreateChatThreadResult.#ctor(Azure.Communication.Chat.CreateChatThreadResultInternal)">
            <summary> Initializes a new instance of CreateChatThreadResult. </summary>
            <param name="createChatThreadResultInternal"> Chat thread. </param>
        </member>
        <member name="P:Azure.Communication.Chat.CreateChatThreadResult.ChatThread">
            <summary> Chat thread. </summary>
        </member>
        <member name="P:Azure.Communication.Chat.CreateChatThreadResult.InvalidParticipants">
            <summary> Errors encountered during the creation of the chat thread. </summary>
        </member>
        <member name="T:Azure.Communication.Chat.SendChatMessageOptions">
            <summary> Options for the chat message. </summary>
        </member>
        <member name="P:Azure.Communication.Chat.SendChatMessageOptions.Content">
            <summary>Content for the message</summary>
        </member>
        <member name="P:Azure.Communication.Chat.SendChatMessageOptions.MessageType">
            <summary>The message type.</summary>
        </member>
        <member name="P:Azure.Communication.Chat.SendChatMessageOptions.SenderDisplayName">
            <summary>The display name of the message sender. This property is used to populate sender name for push notifications.</summary>
        </member>
        <member name="P:Azure.Communication.Chat.SendChatMessageOptions.Metadata">
            <summary> Properties bag for custom attributes to the message in the form of key-value pair. </summary>
        </member>
        <member name="T:Azure.Communication.Chat.SendChatMessageResult">
            <summary>
            SendChatMessageResult
            </summary>
        </member>
        <member name="M:Azure.Communication.Chat.SendChatMessageResult.#ctor(Azure.Communication.Chat.SendChatMessageResultInternal)">
            <summary> Initializes a new instance of SendChatMessageResult. </summary>
            <param name="sendChatMessageResultInternal"> send chat message result. </param>
        </member>
        <member name="P:Azure.Communication.Chat.SendChatMessageResult.Id">
            <summary> A server-generated message id. </summary>
        </member>
        <member name="T:Azure.Communication.Chat.TypingNotificationOptions">
            <summary> Options for the typing notification. </summary>
        </member>
        <member name="P:Azure.Communication.Chat.TypingNotificationOptions.SenderDisplayName">
            <summary>The display name of the message sender. This property is used to populate sender name for push notifications.</summary>
        </member>
        <member name="T:Azure.Communication.Chat.UpdateChatMessageOptions">
            <summary> Options for the chat message. </summary>
        </member>
        <member name="P:Azure.Communication.Chat.UpdateChatMessageOptions.MessageId">
            <summary> The id of the chat message. </summary>
        </member>
        <member name="P:Azure.Communication.Chat.UpdateChatMessageOptions.Content">
            <summary> Content of a chat message. </summary>
        </member>
        <member name="P:Azure.Communication.Chat.UpdateChatMessageOptions.Metadata">
            <summary> Properties bag for custom attributes to the message in the form of key-value pair. </summary>
        </member>
        <member name="T:Azure.Communication.CommunicationCloudEnvironmentModel">
            <summary> The cloud that the identifier belongs to. </summary>
        </member>
        <member name="M:Azure.Communication.CommunicationCloudEnvironmentModel.#ctor(System.String)">
            <summary> Initializes a new instance of <see cref="T:Azure.Communication.CommunicationCloudEnvironmentModel" />. </summary>
            <exception cref="T:System.ArgumentNullException"> <paramref name="value" /> is null. </exception>
        </member>
        <member name="P:Azure.Communication.CommunicationCloudEnvironmentModel.Public">
            <summary> public. </summary>
        </member>
        <member name="P:Azure.Communication.CommunicationCloudEnvironmentModel.Dod">
            <summary> dod. </summary>
        </member>
        <member name="P:Azure.Communication.CommunicationCloudEnvironmentModel.Gcch">
            <summary> gcch. </summary>
        </member>
        <member name="M:Azure.Communication.CommunicationCloudEnvironmentModel.op_Equality(Azure.Communication.CommunicationCloudEnvironmentModel,Azure.Communication.CommunicationCloudEnvironmentModel)">
            <summary> Determines if two <see cref="T:Azure.Communication.CommunicationCloudEnvironmentModel" /> values are the same. </summary>
        </member>
        <member name="M:Azure.Communication.CommunicationCloudEnvironmentModel.op_Inequality(Azure.Communication.CommunicationCloudEnvironmentModel,Azure.Communication.CommunicationCloudEnvironmentModel)">
            <summary> Determines if two <see cref="T:Azure.Communication.CommunicationCloudEnvironmentModel" /> values are not the same. </summary>
        </member>
        <member name="M:Azure.Communication.CommunicationCloudEnvironmentModel.op_Implicit(System.String)~Azure.Communication.CommunicationCloudEnvironmentModel">
            <summary> Converts a string to a <see cref="T:Azure.Communication.CommunicationCloudEnvironmentModel" />. </summary>
        </member>
        <member name="M:Azure.Communication.CommunicationCloudEnvironmentModel.Equals(System.Object)">
            <summary>Indicates whether this instance and a specified object are equal.</summary><param name="obj">The object to compare with the current instance.</param><returns><see langword="true" /> if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.Communication.CommunicationCloudEnvironmentModel.Equals(Azure.Communication.CommunicationCloudEnvironmentModel)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary><param name="other">An object to compare with this object.</param><returns><see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.Communication.CommunicationCloudEnvironmentModel.GetHashCode">
            <summary>Returns the hash code for this instance.</summary><returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:Azure.Communication.CommunicationCloudEnvironmentModel.ToString">
            <summary>Returns the fully qualified type name of this instance.</summary><returns>The fully qualified type name.</returns>
        </member>
        <member name="T:Azure.Communication.CommunicationIdentifierModel">
            <summary> Identifies a participant in Azure Communication services. A participant is, for example, a phone number or an Azure communication user. This model is polymorphic: Apart from kind and rawId, at most one further property may be set which must match the kind enum value. </summary>
        </member>
        <member name="M:Azure.Communication.CommunicationIdentifierModel.#ctor">
            <summary> Initializes a new instance of <see cref="T:Azure.Communication.CommunicationIdentifierModel" />. </summary>
        </member>
        <member name="M:Azure.Communication.CommunicationIdentifierModel.#ctor(System.Nullable{Azure.Communication.CommunicationIdentifierModelKind},System.String,Azure.Communication.CommunicationUserIdentifierModel,Azure.Communication.PhoneNumberIdentifierModel,Azure.Communication.MicrosoftTeamsUserIdentifierModel,Azure.Communication.MicrosoftTeamsAppIdentifierModel)">
            <summary> Initializes a new instance of <see cref="T:Azure.Communication.CommunicationIdentifierModel" />. </summary>
            <param name="kind"> The identifier kind. Only required in responses. </param>
            <param name="rawId"> Raw Id of the identifier. Optional in requests, required in responses. </param>
            <param name="communicationUser"> The communication user. </param>
            <param name="phoneNumber"> The phone number. </param>
            <param name="microsoftTeamsUser"> The Microsoft Teams user. </param>
            <param name="microsoftTeamsApp"> The Microsoft Teams application. </param>
        </member>
        <member name="P:Azure.Communication.CommunicationIdentifierModel.Kind">
            <summary> The identifier kind. Only required in responses. </summary>
        </member>
        <member name="P:Azure.Communication.CommunicationIdentifierModel.RawId">
            <summary> Raw Id of the identifier. Optional in requests, required in responses. </summary>
        </member>
        <member name="P:Azure.Communication.CommunicationIdentifierModel.CommunicationUser">
            <summary> The communication user. </summary>
        </member>
        <member name="P:Azure.Communication.CommunicationIdentifierModel.PhoneNumber">
            <summary> The phone number. </summary>
        </member>
        <member name="P:Azure.Communication.CommunicationIdentifierModel.MicrosoftTeamsUser">
            <summary> The Microsoft Teams user. </summary>
        </member>
        <member name="P:Azure.Communication.CommunicationIdentifierModel.MicrosoftTeamsApp">
            <summary> The Microsoft Teams application. </summary>
        </member>
        <member name="M:Azure.Communication.CommunicationIdentifierModel.FromResponse(Azure.Response)">
            <summary> Deserializes the model from a raw response. </summary>
            <param name="response"> The response to deserialize the model from. </param>
        </member>
        <member name="M:Azure.Communication.CommunicationIdentifierModel.ToRequestContent">
            <summary> Convert into a <see cref="T:Azure.Core.RequestContent" />. </summary>
        </member>
        <member name="T:Azure.Communication.CommunicationIdentifierModelKind">
            <summary> The identifier kind, for example 'communicationUser' or 'phoneNumber'. </summary>
        </member>
        <member name="M:Azure.Communication.CommunicationIdentifierModelKind.#ctor(System.String)">
            <summary> Initializes a new instance of <see cref="T:Azure.Communication.CommunicationIdentifierModelKind" />. </summary>
            <exception cref="T:System.ArgumentNullException"> <paramref name="value" /> is null. </exception>
        </member>
        <member name="P:Azure.Communication.CommunicationIdentifierModelKind.Unknown">
            <summary> unknown. </summary>
        </member>
        <member name="P:Azure.Communication.CommunicationIdentifierModelKind.CommunicationUser">
            <summary> communicationUser. </summary>
        </member>
        <member name="P:Azure.Communication.CommunicationIdentifierModelKind.PhoneNumber">
            <summary> phoneNumber. </summary>
        </member>
        <member name="P:Azure.Communication.CommunicationIdentifierModelKind.MicrosoftTeamsUser">
            <summary> microsoftTeamsUser. </summary>
        </member>
        <member name="P:Azure.Communication.CommunicationIdentifierModelKind.MicrosoftTeamsApp">
            <summary> microsoftTeamsApp. </summary>
        </member>
        <member name="M:Azure.Communication.CommunicationIdentifierModelKind.op_Equality(Azure.Communication.CommunicationIdentifierModelKind,Azure.Communication.CommunicationIdentifierModelKind)">
            <summary> Determines if two <see cref="T:Azure.Communication.CommunicationIdentifierModelKind" /> values are the same. </summary>
        </member>
        <member name="M:Azure.Communication.CommunicationIdentifierModelKind.op_Inequality(Azure.Communication.CommunicationIdentifierModelKind,Azure.Communication.CommunicationIdentifierModelKind)">
            <summary> Determines if two <see cref="T:Azure.Communication.CommunicationIdentifierModelKind" /> values are not the same. </summary>
        </member>
        <member name="M:Azure.Communication.CommunicationIdentifierModelKind.op_Implicit(System.String)~Azure.Communication.CommunicationIdentifierModelKind">
            <summary> Converts a string to a <see cref="T:Azure.Communication.CommunicationIdentifierModelKind" />. </summary>
        </member>
        <member name="M:Azure.Communication.CommunicationIdentifierModelKind.Equals(System.Object)">
            <summary>Indicates whether this instance and a specified object are equal.</summary><param name="obj">The object to compare with the current instance.</param><returns><see langword="true" /> if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.Communication.CommunicationIdentifierModelKind.Equals(Azure.Communication.CommunicationIdentifierModelKind)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary><param name="other">An object to compare with this object.</param><returns><see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.Communication.CommunicationIdentifierModelKind.GetHashCode">
            <summary>Returns the hash code for this instance.</summary><returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:Azure.Communication.CommunicationIdentifierModelKind.ToString">
            <summary>Returns the fully qualified type name of this instance.</summary><returns>The fully qualified type name.</returns>
        </member>
        <member name="T:Azure.Communication.CommunicationUserIdentifierModel">
            <summary> A user that got created with an Azure Communication Services resource. </summary>
        </member>
        <member name="M:Azure.Communication.CommunicationUserIdentifierModel.#ctor(System.String)">
            <summary> Initializes a new instance of <see cref="T:Azure.Communication.CommunicationUserIdentifierModel" />. </summary>
            <param name="id"> The Id of the communication user. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="id" /> is null. </exception>
        </member>
        <member name="P:Azure.Communication.CommunicationUserIdentifierModel.Id">
            <summary> The Id of the communication user. </summary>
        </member>
        <member name="M:Azure.Communication.CommunicationUserIdentifierModel.FromResponse(Azure.Response)">
            <summary> Deserializes the model from a raw response. </summary>
            <param name="response"> The response to deserialize the model from. </param>
        </member>
        <member name="M:Azure.Communication.CommunicationUserIdentifierModel.ToRequestContent">
            <summary> Convert into a <see cref="T:Azure.Core.RequestContent" />. </summary>
        </member>
        <member name="T:Azure.Communication.MicrosoftTeamsAppIdentifierModel">
            <summary> A Microsoft Teams application. </summary>
        </member>
        <member name="M:Azure.Communication.MicrosoftTeamsAppIdentifierModel.#ctor(System.String)">
            <summary> Initializes a new instance of <see cref="T:Azure.Communication.MicrosoftTeamsAppIdentifierModel" />. </summary>
            <param name="appId"> The Id of the Microsoft Teams application. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="appId" /> is null. </exception>
        </member>
        <member name="M:Azure.Communication.MicrosoftTeamsAppIdentifierModel.#ctor(System.String,System.Nullable{Azure.Communication.CommunicationCloudEnvironmentModel})">
            <summary> Initializes a new instance of <see cref="T:Azure.Communication.MicrosoftTeamsAppIdentifierModel" />. </summary>
            <param name="appId"> The Id of the Microsoft Teams application. </param>
            <param name="cloud"> The cloud that the Microsoft Teams application belongs to. By default 'public' if missing. </param>
        </member>
        <member name="P:Azure.Communication.MicrosoftTeamsAppIdentifierModel.AppId">
            <summary> The Id of the Microsoft Teams application. </summary>
        </member>
        <member name="P:Azure.Communication.MicrosoftTeamsAppIdentifierModel.Cloud">
            <summary> The cloud that the Microsoft Teams application belongs to. By default 'public' if missing. </summary>
        </member>
        <member name="M:Azure.Communication.MicrosoftTeamsAppIdentifierModel.FromResponse(Azure.Response)">
            <summary> Deserializes the model from a raw response. </summary>
            <param name="response"> The response to deserialize the model from. </param>
        </member>
        <member name="M:Azure.Communication.MicrosoftTeamsAppIdentifierModel.ToRequestContent">
            <summary> Convert into a <see cref="T:Azure.Core.RequestContent" />. </summary>
        </member>
        <member name="T:Azure.Communication.MicrosoftTeamsUserIdentifierModel">
            <summary> A Microsoft Teams user. </summary>
        </member>
        <member name="M:Azure.Communication.MicrosoftTeamsUserIdentifierModel.#ctor(System.String)">
            <summary> Initializes a new instance of <see cref="T:Azure.Communication.MicrosoftTeamsUserIdentifierModel" />. </summary>
            <param name="userId"> The Id of the Microsoft Teams user. If not anonymous, this is the AAD object Id of the user. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="userId" /> is null. </exception>
        </member>
        <member name="M:Azure.Communication.MicrosoftTeamsUserIdentifierModel.#ctor(System.String,System.Nullable{System.Boolean},System.Nullable{Azure.Communication.CommunicationCloudEnvironmentModel})">
            <summary> Initializes a new instance of <see cref="T:Azure.Communication.MicrosoftTeamsUserIdentifierModel" />. </summary>
            <param name="userId"> The Id of the Microsoft Teams user. If not anonymous, this is the AAD object Id of the user. </param>
            <param name="isAnonymous"> True if the Microsoft Teams user is anonymous. By default false if missing. </param>
            <param name="cloud"> The cloud that the Microsoft Teams user belongs to. By default 'public' if missing. </param>
        </member>
        <member name="P:Azure.Communication.MicrosoftTeamsUserIdentifierModel.UserId">
            <summary> The Id of the Microsoft Teams user. If not anonymous, this is the AAD object Id of the user. </summary>
        </member>
        <member name="P:Azure.Communication.MicrosoftTeamsUserIdentifierModel.IsAnonymous">
            <summary> True if the Microsoft Teams user is anonymous. By default false if missing. </summary>
        </member>
        <member name="P:Azure.Communication.MicrosoftTeamsUserIdentifierModel.Cloud">
            <summary> The cloud that the Microsoft Teams user belongs to. By default 'public' if missing. </summary>
        </member>
        <member name="M:Azure.Communication.MicrosoftTeamsUserIdentifierModel.FromResponse(Azure.Response)">
            <summary> Deserializes the model from a raw response. </summary>
            <param name="response"> The response to deserialize the model from. </param>
        </member>
        <member name="M:Azure.Communication.MicrosoftTeamsUserIdentifierModel.ToRequestContent">
            <summary> Convert into a <see cref="T:Azure.Core.RequestContent" />. </summary>
        </member>
        <member name="T:Azure.Communication.PhoneNumberIdentifierModel">
            <summary> A phone number. </summary>
        </member>
        <member name="M:Azure.Communication.PhoneNumberIdentifierModel.#ctor(System.String)">
            <summary> Initializes a new instance of <see cref="T:Azure.Communication.PhoneNumberIdentifierModel" />. </summary>
            <param name="value"> The phone number in E.164 format. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="value" /> is null. </exception>
        </member>
        <member name="P:Azure.Communication.PhoneNumberIdentifierModel.Value">
            <summary> The phone number in E.164 format. </summary>
        </member>
        <member name="M:Azure.Communication.PhoneNumberIdentifierModel.FromResponse(Azure.Response)">
            <summary> Deserializes the model from a raw response. </summary>
            <param name="response"> The response to deserialize the model from. </param>
        </member>
        <member name="M:Azure.Communication.PhoneNumberIdentifierModel.ToRequestContent">
            <summary> Convert into a <see cref="T:Azure.Core.RequestContent" />. </summary>
        </member>
        <member name="T:Azure.Core.AzureResourceProviderNamespaceAttribute">
            <summary>
            This attribute should be set on all client assemblies with value of one of the resource providers
            from the https://docs.microsoft.com/azure/azure-resource-manager/management/azure-services-resource-providers list.
            </summary>
        </member>
        <member name="P:Azure.Core.CodeGenModelAttribute.Usage">
            <summary>
            Gets or sets a coma separated list of additional model usage modes. Allowed values: model, error, intput, output.
            </summary>
        </member>
        <member name="P:Azure.Core.CodeGenModelAttribute.Formats">
            <summary>
            Gets or sets a coma separated list of additional model serialization formats.
            </summary>
        </member>
        <member name="P:Azure.Core.CodeGenSerializationAttribute.PropertyName">
            <summary>
            Gets or sets the property name which these hooks should apply to
            </summary>
        </member>
        <member name="P:Azure.Core.CodeGenSerializationAttribute.SerializationPath">
            <summary>
            Gets or sets the serialization path of the property in the JSON
            </summary>
        </member>
        <member name="P:Azure.Core.CodeGenSerializationAttribute.SerializationValueHook">
            <summary>
            Gets or sets the method name to use when serializing the property value (property name excluded)
            The signature of the serialization hook method must be or compatible with when invoking:
            private void SerializeHook(Utf8JsonWriter writer);
            </summary>
        </member>
        <member name="P:Azure.Core.CodeGenSerializationAttribute.DeserializationValueHook">
            <summary>
            Gets or sets the method name to use when deserializing the property value from the JSON
            private static void DeserializationHook(JsonProperty property, ref TypeOfTheProperty propertyValue); // if the property is required
            private static void DeserializationHook(JsonProperty property, ref Optional&lt;TypeOfTheProperty&gt; propertyValue); // if the property is optional
            </summary>
        </member>
        <member name="P:Azure.Core.CodeGenSerializationAttribute.BicepSerializationValueHook">
            <summary>
            Gets or sets the method name to use when serializing the property value (property name excluded)
            The signature of the serialization hook method must be or compatible with when invoking:
            private void SerializeHook(StringBuilder builder);
            </summary>
        </member>
        <member name="T:Azure.Core.AppContextSwitchHelper">
            <summary>
            Helper for interacting with AppConfig settings and their related Environment variable settings.
            </summary>
        </member>
        <member name="M:Azure.Core.AppContextSwitchHelper.GetConfigValue(System.String,System.String)">
            <summary>
            Determines if either an AppContext switch or its corresponding Environment Variable is set
            </summary>
            <param name="appContexSwitchName">Name of the AppContext switch.</param>
            <param name="environmentVariableName">Name of the Environment variable.</param>
            <returns>If the AppContext switch has been set, returns the value of the switch.
            If the AppContext switch has not been set, returns the value of the environment variable.
            False if neither is set.
            </returns>
        </member>
        <member name="T:Azure.Core.AsyncLockWithValue`1">
            <summary>
            Primitive that combines async lock and value cache
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Azure.Core.AsyncLockWithValue`1.GetLockOrValueAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Method that either returns cached value or acquire a lock.
            If one caller has acquired a lock, other callers will be waiting for the lock to be released.
            If value is set, lock is released and all waiters get that value.
            If value isn't set, the next waiter in the queue will get the lock.
            </summary>
            <param name="async"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:Azure.Core.AsyncLockWithValue`1.LockOrValue.HasValue">
            <summary>
            Returns true if lock contains the cached value. Otherwise false.
            </summary>
        </member>
        <member name="P:Azure.Core.AsyncLockWithValue`1.LockOrValue.Value">
            <summary>
            Returns cached value if it was set when lock has been created. Throws exception otherwise.
            </summary>
            <exception cref="T:System.InvalidOperationException">Value isn't set.</exception>
        </member>
        <member name="M:Azure.Core.AsyncLockWithValue`1.LockOrValue.SetValue(`0)">
            <summary>
            Set value to the cache and to all the waiters.
            </summary>
            <param name="value"></param>
            <exception cref="T:System.InvalidOperationException">Value is set already.</exception>
        </member>
        <member name="M:Azure.Core.Pipeline.ClientDiagnostics.#ctor(Azure.Core.ClientOptions,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Core.Pipeline.ClientDiagnostics" /> class.
            </summary>
            <param name="options">The customer provided client options object.</param>
            <param name="suppressNestedClientActivities">Flag controlling if <see cref="T:System.Diagnostics.Activity" />
             created by this <see cref="T:Azure.Core.Pipeline.ClientDiagnostics" /> for client method calls should be suppressed when called
             by other Azure SDK client methods.  It's recommended to set it to true for new clients; use default (null)
             for backward compatibility reasons, or set it to false to explicitly disable suppression for specific cases.
             The default value could change in the future, the flag should be only set to false if suppression for the client
             should never be enabled.</param>
        </member>
        <member name="M:Azure.Core.Pipeline.ClientDiagnostics.#ctor(System.String,System.String,Azure.Core.DiagnosticsOptions,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Core.Pipeline.ClientDiagnostics" /> class.
            </summary>
            <param name="optionsNamespace">Namespace of the client class, such as Azure.Storage or Azure.AppConfiguration.</param>
            <param name="providerNamespace">Azure Resource Provider namespace of the Azure service SDK is primarily used for.</param>
            <param name="diagnosticsOptions">The customer provided client diagnostics options.</param>
            <param name="suppressNestedClientActivities">Flag controlling if <see cref="T:System.Diagnostics.Activity" />
             created by this <see cref="T:Azure.Core.Pipeline.ClientDiagnostics" /> for client method calls should be suppressed when called
             by other Azure SDK client methods.  It's recommended to set it to true for new clients, use default (null) for old clients
             for backward compatibility reasons, or set it to false to explicitly disable suppression for specific cases.
             The default value could change in the future, the flag should be only set to false if suppression for the client
             should never be enabled.</param>
        </member>
        <member name="M:Azure.Core.Pipeline.DiagnosticScope.AddLink(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Adds a link to the scope. This must be called before <see cref="M:Azure.Core.Pipeline.DiagnosticScope.Start" /> has been called for the DiagnosticScope.
            </summary>
            <param name="traceparent">The traceparent for the link.</param>
            <param name="tracestate">The tracestate for the link.</param>
            <param name="attributes">Optional attributes to associate with the link.</param>
        </member>
        <member name="M:Azure.Core.Pipeline.DiagnosticScope.SetTraceContext(System.String,System.String)">
            <summary>
            Sets the trace context for the current scope.
            </summary>
            <param name="traceparent">The trace parent to set for the current scope.</param>
            <param name="tracestate">The trace state to set for the current scope.</param>
        </member>
        <member name="M:Azure.Core.Pipeline.DiagnosticScope.Failed(System.Exception)">
            <summary>
            Marks the scope as failed.
            </summary>
            <param name="exception">The exception to associate with the failed scope.</param>
        </member>
        <member name="M:Azure.Core.Pipeline.DiagnosticScope.Failed(System.String)">
            <summary>
            Marks the scope as failed with low-cardinality error.type attribute.
            </summary>
            <param name="errorCode">Error code to associate with the failed scope.</param>
        </member>
        <member name="T:Azure.Core.Pipeline.ActivityExtensions">
            <summary>
            Until Activity Source is no longer considered experimental.
            </summary>
        </member>
        <member name="M:Azure.Core.Pipeline.DiagnosticScopeFactory.#ctor(System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates diagnostic scope factory.
            </summary>
            <param name="clientNamespace">The namespace which is used as a prefix for all ActivitySources created by the factory and the name of DiagnosticSource (when used).</param>
            <param name="resourceProviderNamespace">Azure resource provider namespace.</param>
            <param name="isActivityEnabled">Flag indicating if distributed tracing is enabled.</param>
            <param name="suppressNestedClientActivities">Flag indicating if nested Azure SDK activities describing public API calls should be suppressed.</param>
            <param name="isStable">Whether instrumentation is considered stable. When false, experimental feature flag controls if tracing is enabled.</param>
        </member>
        <member name="T:Azure.Core.Pipeline.TaskExtensions.Enumerable`1">
            <summary>
            Both <see cref="T:Azure.Core.Pipeline.TaskExtensions.Enumerable`1" /> and <see cref="T:Azure.Core.Pipeline.TaskExtensions.Enumerator`1" /> are defined as public structs so that foreach can use duck typing
            to call <see cref="M:Azure.Core.Pipeline.TaskExtensions.Enumerable`1.GetEnumerator" /> and avoid heap memory allocation.
            Please don't delete this method and don't make these types private.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Azure.Core.FixedDelayWithNoJitterStrategy">
            <summary>
            A delay strategy that uses a fixed delay with no jitter applied. This is used by data plane LROs.
            </summary>
        </member>
        <member name="T:Azure.Core.OperationInternal">
            <summary>
            A helper class used to build long-running operation instances. In order to use this helper:
            <list type="number">
              <item>Make sure your LRO implements the <see cref="T:Azure.Core.IOperation" /> interface.</item>
              <item>Add a private <see cref="T:Azure.Core.OperationInternal" /> field to your LRO, and instantiate it during construction.</item>
              <item>Delegate method calls to the <see cref="T:Azure.Core.OperationInternal" /> implementations.</item>
            </list>
            Supported members:
            <list type="bullet">
              <item>
                <description><see cref="P:Azure.Core.OperationInternalBase.HasCompleted" /></description>
              </item>
              <item>
                <description><see cref="P:Azure.Core.OperationInternalBase.RawResponse" />, used for <see cref="M:Azure.Operation.GetRawResponse" /></description>
              </item>
              <item>
                <description><see cref="M:Azure.Core.OperationInternalBase.UpdateStatus(System.Threading.CancellationToken)" /></description>
              </item>
              <item>
                <description><see cref="M:Azure.Core.OperationInternalBase.UpdateStatusAsync(System.Threading.CancellationToken)" /></description>
              </item>
              <item>
                <description><see cref="M:Azure.Core.OperationInternalBase.WaitForCompletionResponseAsync(System.Threading.CancellationToken)" /></description>
              </item>
              <item>
                <description><see cref="M:Azure.Core.OperationInternalBase.WaitForCompletionResponseAsync(System.TimeSpan,System.Threading.CancellationToken)" /></description>
              </item>
            </list>
            </summary>
        </member>
        <member name="M:Azure.Core.OperationInternal.Succeeded(Azure.Response)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Core.OperationInternal" /> class in a final successful state.
            </summary>
            <param name="rawResponse">The final value of <see cref="P:Azure.Core.OperationInternalBase.RawResponse" />.</param>
        </member>
        <member name="M:Azure.Core.OperationInternal.Failed(Azure.Response,Azure.RequestFailedException)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Core.OperationInternal" /> class in a final failed state.
            </summary>
            <param name="rawResponse">The final value of <see cref="P:Azure.Core.OperationInternalBase.RawResponse" />.</param>
            <param name="operationFailedException">The exception that will be thrown by <c>UpdateStatusAsync</c>.</param>
        </member>
        <member name="M:Azure.Core.OperationInternal.#ctor(Azure.Core.IOperation,Azure.Core.Pipeline.ClientDiagnostics,Azure.Response,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},Azure.Core.DelayStrategy)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Core.OperationInternal" /> class.
            </summary>
            <param name="operation">The long-running operation making use of this class. Passing "<c>this</c>" is expected.</param>
            <param name="clientDiagnostics">Used for diagnostic scope and exception creation. This is expected to be the instance created during the construction of your main client.</param>
            <param name="rawResponse">
                The initial value of <see cref="P:Azure.Core.OperationInternalBase.RawResponse" />. Usually, long-running operation objects can be instantiated in two ways:
                <list type="bullet">
                    <item>
                        When calling a client's "<c>Start&lt;OperationName&gt;</c>" method, a service call is made to start the operation, and an <see cref="T:Azure.Operation" /> instance is returned.
                        In this case, the response received from this service call can be passed here.
                    </item>
                    <item>
                        When a user instantiates an <see cref="T:Azure.Operation" /> directly using a public constructor, there's no previous service call. In this case, passing <c>null</c> is expected.
                    </item>
                </list>
            </param>
            <param name="operationTypeName">
                The type name of the long-running operation making use of this class. Used when creating diagnostic scopes. If left <c>null</c>, the type name will be inferred based on the
                parameter <paramref name="operation" />.
            </param>
            <param name="scopeAttributes">The attributes to use during diagnostic scope creation.</param>
            <param name="fallbackStrategy"> The delay strategy to use. Default is <see cref="T:Azure.Core.FixedDelayWithNoJitterStrategy" />.</param>
        </member>
        <member name="T:Azure.Core.IOperation">
            <summary>
            An interface used by <see cref="T:Azure.Core.OperationInternal" /> for making service calls and updating state. It's expected that
            your long-running operation classes implement this interface.
            </summary>
        </member>
        <member name="M:Azure.Core.IOperation.UpdateStateAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Calls the service and updates the state of the long-running operation. Properties directly handled by the
            <see cref="T:Azure.Core.OperationInternal" /> class, such as <see cref="P:Azure.Core.OperationInternalBase.RawResponse" />
            don't need to be updated. Operation-specific properties, such as "<c>CreateOn</c>" or "<c>LastModified</c>",
            must be manually updated by the operation implementing this method.
            <example>Usage example:
            <code>
              async ValueTask&lt;OperationState&gt; IOperation.UpdateStateAsync(bool async, CancellationToken cancellationToken)<br />
              {<br />
                Response&lt;R&gt; response = async ? &lt;async service call&gt; : &lt;sync service call&gt;;<br />
                if (&lt;operation succeeded&gt;) return OperationState.Success(response.GetRawResponse(), &lt;parse response&gt;);<br />
                if (&lt;operation failed&gt;) return OperationState.Failure(response.GetRawResponse());<br />
                return OperationState.Pending(response.GetRawResponse());<br />
              }
            </code>
            </example>
            </summary>
            <param name="async"><c>true</c> if the call should be executed asynchronously. Otherwise, <c>false</c>.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>
            A structure indicating the current operation state. The <see cref="T:Azure.Core.OperationState" /> structure must be instantiated by one of
            its static methods:
            <list type="bullet">
              <item>Use <see cref="M:Azure.Core.OperationState.Success(Azure.Response)" /> when the operation has completed successfully.</item>
              <item>Use <see cref="M:Azure.Core.OperationState.Failure(Azure.Response,Azure.RequestFailedException)" /> when the operation has completed with failures.</item>
              <item>Use <see cref="M:Azure.Core.OperationState.Pending(Azure.Response)" /> when the operation has not completed yet.</item>
            </list>
            </returns>
        </member>
        <member name="T:Azure.Core.OperationState">
            <summary>
            A helper structure passed to <see cref="T:Azure.Core.OperationInternal" /> to indicate the current operation state. This structure must be
            instantiated by one of its static methods, depending on the operation state:
            <list type="bullet">
              <item>Use <see cref="M:Azure.Core.OperationState.Success(Azure.Response)" /> when the operation has completed successfully.</item>
              <item>Use <see cref="M:Azure.Core.OperationState.Failure(Azure.Response,Azure.RequestFailedException)" /> when the operation has completed with failures.</item>
              <item>Use <see cref="M:Azure.Core.OperationState.Pending(Azure.Response)" /> when the operation has not completed yet.</item>
            </list>
            </summary>
        </member>
        <member name="M:Azure.Core.OperationState.Success(Azure.Response)">
            <summary>
            Instantiates an <see cref="T:Azure.Core.OperationState" /> indicating the operation has completed successfully.
            </summary>
            <param name="rawResponse">The HTTP response obtained during the status update.</param>
            <returns>A new <see cref="T:Azure.Core.OperationState" /> instance.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="rawResponse" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Azure.Core.OperationState.Failure(Azure.Response,Azure.RequestFailedException)">
            <summary>
            Instantiates an <see cref="T:Azure.Core.OperationState" /> indicating the operation has completed with failures.
            </summary>
            <param name="rawResponse">The HTTP response obtained during the status update.</param>
            <param name="operationFailedException">
            The exception to throw from <c>UpdateStatus</c> because of the operation failure. If left <c>null</c>,
            a default exception is created based on the <paramref name="rawResponse" /> parameter.
            </param>
            <returns>A new <see cref="T:Azure.Core.OperationState" /> instance.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="rawResponse" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Azure.Core.OperationState.Pending(Azure.Response)">
            <summary>
            Instantiates an <see cref="T:Azure.Core.OperationState" /> indicating the operation has not completed yet.
            </summary>
            <param name="rawResponse">The HTTP response obtained during the status update.</param>
            <returns>A new <see cref="T:Azure.Core.OperationState" /> instance.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="rawResponse" /> is <c>null</c>.</exception>
        </member>
        <member name="P:Azure.Core.OperationInternalBase.RawResponse">
            <summary>
            The last HTTP response received from the server. Its update already handled in calls to "<c>UpdateStatus</c>" and
            "<c>WaitForCompletionAsync</c>", but custom methods not supported by this class, such as "<c>CancelOperation</c>",
            must update it as well.
            <example>Usage example:
            <code>
              public Response GetRawResponse() =&gt; _operationInternal.RawResponse;
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Azure.Core.OperationInternalBase.HasCompleted">
            <summary>
            Returns <c>true</c> if the long-running operation has completed.
            <example>Usage example:
            <code>
              public bool HasCompleted =&gt; _operationInternal.HasCompleted;
            </code>
            </example>
            </summary>
        </member>
        <member name="M:Azure.Core.OperationInternalBase.UpdateStatusAsync(System.Threading.CancellationToken)">
            <summary>
            Calls the server to get the latest status of the long-running operation, handling diagnostic scope creation for distributed
            tracing. The default scope name can be changed with the "<c>operationTypeName</c>" parameter passed to the constructor.
            <example>Usage example:
            <code>
              public async ValueTask&lt;Response&gt; UpdateStatusAsync(CancellationToken cancellationToken) =&gt;
                await _operationInternal.UpdateStatusAsync(cancellationToken).ConfigureAwait(false);
            </code>
            </example>
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The HTTP response received from the server.</returns>
            <remarks>
            After a successful run, this method will update <see cref="P:Azure.Core.OperationInternalBase.RawResponse" /> and might update <see cref="P:Azure.Core.OperationInternalBase.HasCompleted" />.
            </remarks>
            <exception cref="T:Azure.RequestFailedException">Thrown if there's been any issues during the connection, or if the operation has completed with failures.</exception>
        </member>
        <member name="M:Azure.Core.OperationInternalBase.UpdateStatus(System.Threading.CancellationToken)">
            <summary>
            Calls the server to get the latest status of the long-running operation, handling diagnostic scope creation for distributed
            tracing. The default scope name can be changed with the "<c>operationTypeName</c>" parameter passed to the constructor.
            <example>Usage example:
            <code>
              public Response UpdateStatus(CancellationToken cancellationToken) =&gt; _operationInternal.UpdateStatus(cancellationToken);
            </code>
            </example>
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The HTTP response received from the server.</returns>
            <remarks>
            After a successful run, this method will update <see cref="P:Azure.Core.OperationInternalBase.RawResponse" /> and might update <see cref="P:Azure.Core.OperationInternalBase.HasCompleted" />.
            </remarks>
            <exception cref="T:Azure.RequestFailedException">Thrown if there's been any issues during the connection, or if the operation has completed with failures.</exception>
        </member>
        <member name="M:Azure.Core.OperationInternalBase.WaitForCompletionResponseAsync(System.Threading.CancellationToken)">
            <summary>
            Periodically calls <see cref="M:Azure.Core.OperationInternalBase.UpdateStatusAsync(System.Threading.CancellationToken)" /> until the long-running operation completes.
            After each service call, a retry-after header may be returned to communicate that there is no reason to poll
            for status change until the specified time has passed.  The maximum of the retry after value and the fallback strategy
            is then used as the wait interval.
            Headers supported are: "Retry-After", "retry-after-ms", and "x-ms-retry-after-ms",
            <example>Usage example:
            <code>
              public async ValueTask&lt;Response&lt;T&gt;&gt; WaitForCompletionAsync(CancellationToken cancellationToken) =&gt;
                await _operationInternal.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
            </code>
            </example>
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The last HTTP response received from the server, including the final result of the long-running operation.</returns>
            <exception cref="T:Azure.RequestFailedException">Thrown if there's been any issues during the connection, or if the operation has completed with failures.</exception>
        </member>
        <member name="M:Azure.Core.OperationInternalBase.WaitForCompletionResponseAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Periodically calls <see cref="M:Azure.Core.OperationInternalBase.UpdateStatusAsync(System.Threading.CancellationToken)" /> until the long-running operation completes. The interval
            between calls is defined by the parameter <paramref name="pollingInterval" />, but it can change based on information returned
            from the server. After each service call, a retry-after header may be returned to communicate that there is no reason to poll
            for status change until the specified time has passed. In this case, the maximum value between the <paramref name="pollingInterval" />
            parameter and the retry-after header is chosen as the wait interval. Headers supported are: "Retry-After", "retry-after-ms",
            and "x-ms-retry-after-ms".
            <example>Usage example:
            <code>
              public async ValueTask&lt;Response&lt;T&gt;&gt; WaitForCompletionAsync(TimeSpan pollingInterval, CancellationToken cancellationToken) =&gt;
                await _operationInternal.WaitForCompletionAsync(pollingInterval, cancellationToken).ConfigureAwait(false);
            </code>
            </example>
            </summary>
            <param name="pollingInterval">The interval between status requests to the server. <strong></strong></param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The last HTTP response received from the server, including the final result of the long-running operation.</returns>
            <exception cref="T:Azure.RequestFailedException">Thrown if there's been any issues during the connection, or if the operation has completed with failures.</exception>
        </member>
        <member name="M:Azure.Core.OperationInternalBase.WaitForCompletionResponse(System.Threading.CancellationToken)">
            <summary>
            Periodically calls <see cref="M:Azure.Core.OperationInternalBase.UpdateStatus(System.Threading.CancellationToken)" /> until the long-running operation completes.
            After each service call, a retry-after header may be returned to communicate that there is no reason to poll
            for status change until the specified time has passed.  The maximum of the retry after value and the fallback strategy
            is then used as the wait interval.
            Headers supported are: "Retry-After", "retry-after-ms", and "x-ms-retry-after-ms",
            and "x-ms-retry-after-ms".
            <example>Usage example:
            <code>
              public async ValueTask&lt;Response&lt;T&gt;&gt; WaitForCompletionAsync(TimeSpan pollingInterval, CancellationToken cancellationToken) =&gt;
                await _operationInternal.WaitForCompletionAsync(pollingInterval, cancellationToken).ConfigureAwait(false);
            </code>
            </example>
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The last HTTP response received from the server, including the final result of the long-running operation.</returns>
            <exception cref="T:Azure.RequestFailedException">Thrown if there's been any issues during the connection, or if the operation has completed with failures.</exception>
        </member>
        <member name="M:Azure.Core.OperationInternalBase.WaitForCompletionResponse(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Periodically calls <see cref="M:Azure.Core.OperationInternalBase.UpdateStatus(System.Threading.CancellationToken)" /> until the long-running operation completes. The interval
            between calls is defined by the parameter <paramref name="pollingInterval" />, but it can change based on information returned
            from the server. After each service call, a retry-after header may be returned to communicate that there is no reason to poll
            for status change until the specified time has passed. In this case, the maximum value between the <paramref name="pollingInterval" />
            parameter and the retry-after header is chosen as the wait interval. Headers supported are: "Retry-After", "retry-after-ms",
            and "x-ms-retry-after-ms".
            <example>Usage example:
            <code>
              public async ValueTask&lt;Response&lt;T&gt;&gt; WaitForCompletionAsync(TimeSpan pollingInterval, CancellationToken cancellationToken) =&gt;
                await _operationInternal.WaitForCompletionAsync(pollingInterval, cancellationToken).ConfigureAwait(false);
            </code>
            </example>
            </summary>
            <param name="pollingInterval">The interval between status requests to the server.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The last HTTP response received from the server, including the final result of the long-running operation.</returns>
            <exception cref="T:Azure.RequestFailedException">Thrown if there's been any issues during the connection, or if the operation has completed with failures.</exception>
        </member>
        <member name="T:Azure.Core.OperationInternal`1">
            <summary>
            A helper class used to build long-running operation instances. In order to use this helper:
            <list type="number">
              <item>Make sure your LRO implements the <see cref="T:Azure.Core.IOperation`1" /> interface.</item>
              <item>Add a private <see cref="T:Azure.Core.OperationInternal`1" /> field to your LRO, and instantiate it during construction.</item>
              <item>Delegate method calls to the <see cref="T:Azure.Core.OperationInternal`1" /> implementations.</item>
            </list>
            Supported members:
            <list type="bullet">
              <item>
                <description><see cref="P:Azure.Core.OperationInternal`1.HasValue" /></description>
              </item>
              <item>
                <description><see cref="P:Azure.Core.OperationInternalBase.HasCompleted" /></description>
              </item>
              <item>
                <description><see cref="P:Azure.Core.OperationInternal`1.Value" /></description>
              </item>
              <item>
                <description><see cref="P:Azure.Core.OperationInternalBase.RawResponse" />, used for <see cref="M:Azure.Operation.GetRawResponse" /></description>
              </item>
              <item>
                <description><see cref="M:Azure.Core.OperationInternalBase.UpdateStatus(System.Threading.CancellationToken)" /></description>
              </item>
              <item>
                <description><see cref="M:Azure.Core.OperationInternalBase.UpdateStatusAsync(System.Threading.CancellationToken)" /></description>
              </item>
              <item>
                <description><see cref="M:Azure.Core.OperationInternal`1.WaitForCompletionAsync(System.Threading.CancellationToken)" /></description>
              </item>
              <item>
                <description><see cref="M:Azure.Core.OperationInternal`1.WaitForCompletionAsync(System.TimeSpan,System.Threading.CancellationToken)" /></description>
              </item>
            </list>
            </summary>
            <typeparam name="T">The final result of the long-running operation. Must match the type used in <see cref="T:Azure.Operation`1" />.</typeparam>
        </member>
        <member name="M:Azure.Core.OperationInternal`1.Succeeded(Azure.Response,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Core.OperationInternal" /> class in a final successful state.
            </summary>
            <param name="rawResponse">The final value of <see cref="P:Azure.Core.OperationInternalBase.RawResponse" />.</param>
            <param name="value">The final result of the long-running operation.</param>
        </member>
        <member name="M:Azure.Core.OperationInternal`1.Failed(Azure.Response,Azure.RequestFailedException)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Core.OperationInternal" /> class in a final failed state.
            </summary>
            <param name="rawResponse">The final value of <see cref="P:Azure.Core.OperationInternalBase.RawResponse" />.</param>
            <param name="operationFailedException">The exception that will be thrown by <c>UpdateStatusAsync</c>.</param>
        </member>
        <member name="M:Azure.Core.OperationInternal`1.#ctor(Azure.Core.IOperation{`0},Azure.Core.Pipeline.ClientDiagnostics,Azure.Response,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},Azure.Core.DelayStrategy)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Core.OperationInternal`1" /> class.
            </summary>
            <param name="operation">The long-running operation making use of this class. Passing "<c>this</c>" is expected.</param>
            <param name="clientDiagnostics">Used for diagnostic scope and exception creation. This is expected to be the instance created during the construction of your main client.</param>
            <param name="rawResponse">
                The initial value of <see cref="P:Azure.Core.OperationInternalBase.RawResponse" />. Usually, long-running operation objects can be instantiated in two ways:
                <list type="bullet">
                    <item>
                        When calling a client's "<c>Start&lt;OperationName&gt;</c>" method, a service call is made to start the operation, and an <see cref="T:Azure.Operation`1" /> instance is returned.
                        In this case, the response received from this service call can be passed here.
                    </item>
                    <item>
                        When a user instantiates an <see cref="T:Azure.Operation`1" /> directly using a public constructor, there's no previous service call. In this case, passing <c>null</c> is expected.
                    </item>
                </list>
            </param>
            <param name="operationTypeName">
                The type name of the long-running operation making use of this class. Used when creating diagnostic scopes. If left <c>null</c>, the type name will be inferred based on the
                parameter <paramref name="operation" />.
            </param>
            <param name="scopeAttributes">The attributes to use during diagnostic scope creation.</param>
            <param name="fallbackStrategy">The delay strategy when Retry-After header is not present.  When it is present, the longer of the two delays will be used.
                Default is <see cref="T:Azure.Core.FixedDelayWithNoJitterStrategy" />.</param>
        </member>
        <member name="P:Azure.Core.OperationInternal`1.HasValue">
            <summary>
            Returns <c>true</c> if the long-running operation completed successfully and has produced a final result.
            <example>Usage example:
            <code>
              public bool HasValue =&gt; _operationInternal.HasValue;
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Azure.Core.OperationInternal`1.Value">
            <summary>
            The final result of the long-running operation.
            <example>Usage example:
            <code>
              public T Value =&gt; _operationInternal.Value;
            </code>
            </example>
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the operation has not completed yet.</exception>
            <exception cref="T:Azure.RequestFailedException">Thrown when the operation has completed with failures.</exception>
        </member>
        <member name="M:Azure.Core.OperationInternal`1.WaitForCompletionAsync(System.Threading.CancellationToken)">
            <summary>
            Periodically calls <see cref="M:Azure.Core.OperationInternalBase.UpdateStatusAsync(System.Threading.CancellationToken)" /> until the long-running operation completes.
            After each service call, a retry-after header may be returned to communicate that there is no reason to poll
            for status change until the specified time has passed.
            Headers supported are: "Retry-After", "retry-after-ms", and "x-ms-retry-after-ms",
            <example>Usage example:
            <code>
              public async ValueTask&lt;Response&lt;T&gt;&gt; WaitForCompletionAsync(CancellationToken cancellationToken) =&gt;
                await _operationInternal.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
            </code>
            </example>
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The last HTTP response received from the server, including the final result of the long-running operation.</returns>
            <exception cref="T:Azure.RequestFailedException">Thrown if there's been any issues during the connection, or if the operation has completed with failures.</exception>
        </member>
        <member name="M:Azure.Core.OperationInternal`1.WaitForCompletionAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Periodically calls <see cref="M:Azure.Core.OperationInternalBase.UpdateStatusAsync(System.Threading.CancellationToken)" /> until the long-running operation completes. The interval
            between calls is defined by the parameter <paramref name="pollingInterval" />, but it can change based on information returned
            from the server. After each service call, a retry-after header may be returned to communicate that there is no reason to poll
            for status change until the specified time has passed. In this case, the maximum value between the <paramref name="pollingInterval" />
            parameter and the retry-after header is chosen as the wait interval. Headers supported are: "Retry-After", "retry-after-ms",
            and "x-ms-retry-after-ms".
            <example>Usage example:
            <code>
              public async ValueTask&lt;Response&lt;T&gt;&gt; WaitForCompletionAsync(TimeSpan pollingInterval, CancellationToken cancellationToken) =&gt;
                await _operationInternal.WaitForCompletionAsync(pollingInterval, cancellationToken).ConfigureAwait(false);
            </code>
            </example>
            </summary>
            <param name="pollingInterval">The interval between status requests to the server.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The last HTTP response received from the server, including the final result of the long-running operation.</returns>
            <exception cref="T:Azure.RequestFailedException">Thrown if there's been any issues during the connection, or if the operation has completed with failures.</exception>
        </member>
        <member name="M:Azure.Core.OperationInternal`1.WaitForCompletion(System.Threading.CancellationToken)">
            <summary>
            Periodically calls <see cref="M:Azure.Core.OperationInternalBase.UpdateStatus(System.Threading.CancellationToken)" /> until the long-running operation completes.
            After each service call, a retry-after header may be returned to communicate that there is no reason to poll
            for status change until the specified time has passed.
            Headers supported are: "Retry-After", "retry-after-ms", and "x-ms-retry-after-ms",
            <example>Usage example:
            <code>
              public async ValueTask&lt;Response&lt;T&gt;&gt; WaitForCompletionAsync(CancellationToken cancellationToken) =&gt;
                await _operationInternal.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
            </code>
            </example>
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The last HTTP response received from the server, including the final result of the long-running operation.</returns>
            <exception cref="T:Azure.RequestFailedException">Thrown if there's been any issues during the connection, or if the operation has completed with failures.</exception>
        </member>
        <member name="M:Azure.Core.OperationInternal`1.WaitForCompletion(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Periodically calls <see cref="M:Azure.Core.OperationInternalBase.UpdateStatus(System.Threading.CancellationToken)" /> until the long-running operation completes. The interval
            between calls is defined by the <see cref="T:Azure.Core.FixedDelayWithNoJitterStrategy" />, which takes into account any retry-after header that is returned
            from the server.
            <example>Usage example:
            <code>
              public async ValueTask&lt;Response&lt;T&gt;&gt; WaitForCompletionAsync(CancellationToken cancellationToken) =&gt;
                await _operationInternal.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
            </code>
            </example>
            </summary>
            <param name="pollingInterval">The interval between status requests to the server.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The last HTTP response received from the server, including the final result of the long-running operation.</returns>
            <exception cref="T:Azure.RequestFailedException">Thrown if there's been any issues during the connection, or if the operation has completed with failures.</exception>
        </member>
        <member name="T:Azure.Core.IOperation`1">
            <summary>
            An interface used by <see cref="T:Azure.Core.OperationInternal`1" /> for making service calls and updating state. It's expected that
            your long-running operation classes implement this interface.
            </summary>
            <typeparam name="T">The final result of the long-running operation. Must match the type used in <see cref="T:Azure.Operation`1" />.</typeparam>
        </member>
        <member name="M:Azure.Core.IOperation`1.UpdateStateAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Calls the service and updates the state of the long-running operation. Properties directly handled by the
            <see cref="T:Azure.Core.OperationInternal`1" /> class, such as <see cref="P:Azure.Core.OperationInternalBase.RawResponse" /> or
            <see cref="P:Azure.Core.OperationInternal`1.Value" />, don't need to be updated. Operation-specific properties, such
            as "<c>CreateOn</c>" or "<c>LastModified</c>", must be manually updated by the operation implementing this
            method.
            <example>Usage example:
            <code>
              async ValueTask&lt;OperationState&lt;T&gt;&gt; IOperation&lt;T&gt;.UpdateStateAsync(bool async, CancellationToken cancellationToken)<br />
              {<br />
                Response&lt;R&gt; response = async ? &lt;async service call&gt; : &lt;sync service call&gt;;<br />
                if (&lt;operation succeeded&gt;) return OperationState&lt;T&gt;.Success(response.GetRawResponse(), &lt;parse response&gt;);<br />
                if (&lt;operation failed&gt;) return OperationState&lt;T&gt;.Failure(response.GetRawResponse());<br />
                return OperationState&lt;T&gt;.Pending(response.GetRawResponse());<br />
              }
            </code>
            </example>
            </summary>
            <param name="async"><c>true</c> if the call should be executed asynchronously. Otherwise, <c>false</c>.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>
            A structure indicating the current operation state. The <see cref="T:Azure.Core.OperationState`1" /> structure must be instantiated by one of
            its static methods:
            <list type="bullet">
              <item>Use <see cref="M:Azure.Core.OperationState`1.Success(Azure.Response,`0)" /> when the operation has completed successfully.</item>
              <item>Use <see cref="M:Azure.Core.OperationState`1.Failure(Azure.Response,Azure.RequestFailedException)" /> when the operation has completed with failures.</item>
              <item>Use <see cref="M:Azure.Core.OperationState`1.Pending(Azure.Response)" /> when the operation has not completed yet.</item>
            </list>
            </returns>
        </member>
        <member name="T:Azure.Core.OperationState`1">
            <summary>
            A helper structure passed to <see cref="T:Azure.Core.OperationInternal`1" /> to indicate the current operation state. This structure must be
            instantiated by one of its static methods, depending on the operation state:
            <list type="bullet">
              <item>Use <see cref="M:Azure.Core.OperationState`1.Success(Azure.Response,`0)" /> when the operation has completed successfully.</item>
              <item>Use <see cref="M:Azure.Core.OperationState`1.Failure(Azure.Response,Azure.RequestFailedException)" /> when the operation has completed with failures.</item>
              <item>Use <see cref="M:Azure.Core.OperationState`1.Pending(Azure.Response)" /> when the operation has not completed yet.</item>
            </list>
            </summary>
            <typeparam name="T">The final result of the long-running operation. Must match the type used in <see cref="T:Azure.Operation`1" />.</typeparam>
        </member>
        <member name="M:Azure.Core.OperationState`1.Success(Azure.Response,`0)">
            <summary>
            Instantiates an <see cref="T:Azure.Core.OperationState`1" /> indicating the operation has completed successfully.
            </summary>
            <param name="rawResponse">The HTTP response obtained during the status update.</param>
            <param name="value">The final result of the long-running operation.</param>
            <returns>A new <see cref="T:Azure.Core.OperationState`1" /> instance.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="rawResponse" /> or <paramref name="value" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Azure.Core.OperationState`1.Failure(Azure.Response,Azure.RequestFailedException)">
            <summary>
            Instantiates an <see cref="T:Azure.Core.OperationState`1" /> indicating the operation has completed with failures.
            </summary>
            <param name="rawResponse">The HTTP response obtained during the status update.</param>
            <param name="operationFailedException">
            The exception to throw from <c>UpdateStatus</c> because of the operation failure. The same exception will be thrown when
            <see cref="P:Azure.Core.OperationInternal`1.Value" /> is called. If left <c>null</c>, a default exception is created based on the
            <paramref name="rawResponse" /> parameter.
            </param>
            <returns>A new <see cref="T:Azure.Core.OperationState`1" /> instance.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="rawResponse" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Azure.Core.OperationState`1.Pending(Azure.Response)">
            <summary>
            Instantiates an <see cref="T:Azure.Core.OperationState`1" /> indicating the operation has not completed yet.
            </summary>
            <param name="rawResponse">The HTTP response obtained during the status update.</param>
            <returns>A new <see cref="T:Azure.Core.OperationState`1" /> instance.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="rawResponse" /> is <c>null</c>.</exception>
        </member>
        <member name="T:Azure.Core.OperationPoller">
            <summary>
            Implementation of LRO polling logic.
            </summary>
        </member>
        <member name="P:Azure.Core.ProtocolOperation`1.Id">
            <summary>
            Gets an ID representing the operation that can be used to poll for
            the status of the long-running operation.
            There are cases that operation id is not available, we return "NOT_SET" for unavailable operation id.
            </summary>
        </member>
        <member name="P:Azure.Core.ProtocolOperation`1.Value">
            <summary>
            Final result of the long-running operation.
            </summary><remarks>
            This property can be accessed only after the operation completes successfully (HasValue is true).
            </remarks>
        </member>
        <member name="P:Azure.Core.ProtocolOperation`1.HasCompleted">
            <summary>
            Returns true if the long-running operation completed.
            </summary>
        </member>
        <member name="P:Azure.Core.ProtocolOperation`1.HasValue">
            <summary>
            Returns true if the long-running operation completed successfully and has produced final result (accessible by Value property).
            </summary>
        </member>
        <member name="M:Azure.Core.ProtocolOperation`1.GetRawResponse">
            <summary>
            The last HTTP response received from the server.
            </summary><remarks>
            The last response returned from the server during the lifecycle of this instance.
            An instance of <see cref="T:Azure.Operation`1" /> sends requests to a server in UpdateStatusAsync, UpdateStatus, and other methods.
            Responses from these requests can be accessed using GetRawResponse.
            </remarks>
        </member>
        <member name="M:Azure.Core.ProtocolOperation`1.UpdateStatus(System.Threading.CancellationToken)">
            <summary>
            Calls the server to get updated status of the long-running operation.
            </summary><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> used for the service call.</param><returns>The HTTP response received from the server.</returns><remarks>
            This operation will update the value returned from GetRawResponse and might update HasCompleted.
            </remarks>
        </member>
        <member name="M:Azure.Core.ProtocolOperation`1.UpdateStatusAsync(System.Threading.CancellationToken)">
            <summary>
            Calls the server to get updated status of the long-running operation.
            </summary><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> used for the service call.</param><returns>The HTTP response received from the server.</returns><remarks>
            This operation will update the value returned from GetRawResponse and might update HasCompleted.
            </remarks>
        </member>
        <member name="M:Azure.Core.ProtocolOperation`1.WaitForCompletionAsync(System.Threading.CancellationToken)">
            <summary>
            Periodically calls the server till the long-running operation completes.
            </summary><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> used for the periodical service calls.</param><returns>The last HTTP response received from the server.</returns><remarks>
            This method will periodically call UpdateStatusAsync till HasCompleted is true, then return the final result of the operation.
            </remarks>
        </member>
        <member name="M:Azure.Core.ProtocolOperation`1.WaitForCompletionAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Periodically calls the server till the long-running operation completes.
            </summary><param name="pollingInterval">
            The interval between status requests to the server.
            The interval can change based on information returned from the server.
            For example, the server might communicate to the client that there is not reason to poll for status change sooner than some time.
            </param><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> used for the periodical service calls.</param><returns>The last HTTP response received from the server.</returns><remarks>
            This method will periodically call UpdateStatusAsync till HasCompleted is true, then return the final result of the operation.
            </remarks>
        </member>
        <member name="T:Azure.Core.SequentialDelayStrategy">
            <summary>
            A delay strategy that uses a fixed sequence of delays with no jitter applied. This is used by management LROs.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute">
            <summary>
            Indicates that the specified method requires the ability to generate new code at runtime,
            for example through <see cref="N:System.Reflection" />.
            </summary>
            <remarks>
            This allows tools to understand which methods are unsafe to call when compiling ahead of time.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute" /> class
            with the specified message.
            </summary>
            <param name="message">
            A message that contains information about the usage of dynamic code.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute.Message">
            <summary>
            Gets a message that contains information about the usage of dynamic code.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute.Url">
            <summary>
            Gets or sets an optional URL that contains more information about the method,
            why it requires dynamic code, and what options a consumer has to deal with it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute">
            <summary>
            Indicates that the specified method requires dynamic access to code that is not referenced
            statically, for example through <see cref="N:System.Reflection" />.
            </summary>
            <remarks>
            This allows tools to understand which methods are unsafe to call when removing unreferenced
            code from an application.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute" /> class
            with the specified message.
            </summary>
            <param name="message">
            A message that contains information about the usage of unreferenced code.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute.Message">
            <summary>
            Gets a message that contains information about the usage of unreferenced code.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute.Url">
            <summary>
            Gets or sets an optional URL that contains more information about the method,
            why it requires unreferenced code, and what options a consumer has to deal with it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute">
            <summary>
            Suppresses reporting of a specific rule violation, allowing multiple suppressions on a
            single code artifact.
            </summary>
            <remarks>
            <see cref="T:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute" /> is different than
            <see cref="T:System.Diagnostics.CodeAnalysis.SuppressMessageAttribute" /> in that it doesn't have a
            <see cref="T:System.Diagnostics.ConditionalAttribute" />. So it is always preserved in the compiled assembly.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute" />
            class, specifying the category of the tool and the identifier for an analysis rule.
            </summary>
            <param name="category">The category for the attribute.</param>
            <param name="checkId">The identifier of the analysis rule the attribute applies to.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Category">
            <summary>
            Gets the category identifying the classification of the attribute.
            </summary>
            <remarks>
            The <see cref="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Category" /> property describes the tool or tool analysis category
            for which a message suppression attribute applies.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.CheckId">
            <summary>
            Gets the identifier of the analysis tool rule to be suppressed.
            </summary>
            <remarks>
            Concatenated together, the <see cref="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Category" /> and <see cref="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.CheckId" />
            properties form a unique check identifier.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Scope">
            <summary>
            Gets or sets the scope of the code that is relevant for the attribute.
            </summary>
            <remarks>
            The Scope property is an optional argument that specifies the metadata scope for which
            the attribute is relevant.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Target">
            <summary>
            Gets or sets a fully qualified path that represents the target of the attribute.
            </summary>
            <remarks>
            The <see cref="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Target" /> property is an optional argument identifying the analysis target
            of the attribute. An example value is "System.IO.Stream.ctor():System.Void".
            Because it is fully qualified, it can be long, particularly for targets such as parameters.
            The analysis tool user interface should be capable of automatically formatting the parameter.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.MessageId">
            <summary>
            Gets or sets an optional argument expanding on exclusion criteria.
            </summary>
            <remarks>
            The <see cref="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.MessageId" /> property is an optional argument that specifies additional
            exclusion where the literal metadata target is not sufficiently precise. For example,
            the <see cref="T:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute" /> cannot be applied within a method,
            and it may be desirable to suppress a violation against a statement in the method that will
            give a rule violation, but not against all statements in the method.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Justification">
            <summary>
            Gets or sets the justification for suppressing the code analysis message.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute">
            <summary>
            States a dependency that one member has on another.
            </summary>
            <remarks>
            This can be used to inform tooling of a dependency that is otherwise not evident purely from
            metadata and IL, for example a member relied on via reflection.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute" /> class
            with the specified signature of a member on the same type as the consumer.
            </summary>
            <param name="memberSignature">The signature of the member depended on.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute" /> class
            with the specified signature of a member on a <see cref="T:System.Type" />.
            </summary>
            <param name="memberSignature">The signature of the member depended on.</param>
            <param name="type">The <see cref="T:System.Type" /> containing <paramref name="memberSignature" />.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute" /> class
            with the specified signature of a member on a type in an assembly.
            </summary>
            <param name="memberSignature">The signature of the member depended on.</param>
            <param name="typeName">The full name of the type containing the specified member.</param>
            <param name="assemblyName">The assembly name of the type containing the specified member.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.#ctor(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute" /> class
            with the specified types of members on a <see cref="T:System.Type" />.
            </summary>
            <param name="memberTypes">The types of members depended on.</param>
            <param name="type">The <see cref="T:System.Type" /> containing the specified members.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.#ctor(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute" /> class
            with the specified types of members on a type in an assembly.
            </summary>
            <param name="memberTypes">The types of members depended on.</param>
            <param name="typeName">The full name of the type containing the specified members.</param>
            <param name="assemblyName">The assembly name of the type containing the specified members.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.MemberSignature">
            <summary>
            Gets the signature of the member depended on.
            </summary>
            <remarks>
            Either <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.MemberSignature" /> must be a valid string or <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.MemberTypes" />
            must not equal <see cref="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.None" />, but not both.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.MemberTypes">
            <summary>
            Gets the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes" /> which specifies the type
            of members depended on.
            </summary>
            <remarks>
            Either <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.MemberSignature" /> must be a valid string or <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.MemberTypes" />
            must not equal <see cref="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.None" />, but not both.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.Type">
            <summary>
            Gets the <see cref="T:System.Type" /> containing the specified member.
            </summary>
            <remarks>
            If neither <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.Type" /> nor <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.TypeName" /> are specified,
            the type of the consumer is assumed.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.TypeName">
            <summary>
            Gets the full name of the type containing the specified member.
            </summary>
            <remarks>
            If neither <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.Type" /> nor <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.TypeName" /> are specified,
            the type of the consumer is assumed.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.AssemblyName">
            <summary>
            Gets the assembly name of the specified type.
            </summary>
            <remarks>
            <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.AssemblyName" /> is only valid when <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.TypeName" /> is specified.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.Condition">
            <summary>
            Gets or sets the condition in which the dependency is applicable, e.g. "DEBUG".
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute">
             <summary>
             Indicates that certain members on a specified <see cref="T:System.Type" /> are accessed dynamically,
             for example through <see cref="N:System.Reflection" />.
             </summary>
             <remarks>
             This allows tools to understand which members are being accessed during the execution
             of a program.
            
             This attribute is valid on members whose type is <see cref="T:System.Type" /> or <see cref="T:System.String" />.
            
             When this attribute is applied to a location of type <see cref="T:System.String" />, the assumption is
             that the string represents a fully qualified type name.
            
             When this attribute is applied to a class, interface, or struct, the members specified
             can be accessed dynamically on <see cref="T:System.Type" /> instances returned from calling
             <see cref="M:System.Object.GetType" /> on instances of that class, interface, or struct.
            
             If the attribute is applied to a method it's treated as a special case and it implies
             the attribute should be applied to the "this" parameter of the method. As such the attribute
             should only be used on instance methods of types assignable to System.Type (or string, but no methods
             will use it there).
             </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute.#ctor(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute" /> class
            with the specified member types.
            </summary>
            <param name="memberTypes">The types of members dynamically accessed.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute.MemberTypes">
            <summary>
            Gets the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes" /> which specifies the type
            of members dynamically accessed.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes">
             <summary>
             Specifies the types of members that are dynamically accessed.
            
             This enumeration has a <see cref="T:System.FlagsAttribute" /> attribute that allows a
             bitwise combination of its member values.
             </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.None">
            <summary>
            Specifies no members.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicParameterlessConstructor">
            <summary>
            Specifies the default, parameterless public constructor.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicConstructors">
            <summary>
            Specifies all public constructors.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicConstructors">
            <summary>
            Specifies all non-public constructors.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicMethods">
            <summary>
            Specifies all public methods.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicMethods">
            <summary>
            Specifies all non-public methods.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicFields">
            <summary>
            Specifies all public fields.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicFields">
            <summary>
            Specifies all non-public fields.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicNestedTypes">
            <summary>
            Specifies all public nested types.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicNestedTypes">
            <summary>
            Specifies all non-public nested types.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicProperties">
            <summary>
            Specifies all public properties.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicProperties">
            <summary>
            Specifies all non-public properties.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicEvents">
            <summary>
            Specifies all public events.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicEvents">
            <summary>
            Specifies all non-public events.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.Interfaces">
            <summary>
            Specifies all interfaces implemented by the type.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.All">
            <summary>
            Specifies all members.
            </summary>
        </member>
        <member name="P:Azure.Communication.Chat.ChangeTrackingDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey@TValue}#Keys">
            <summary>Gets an enumerable collection that contains the keys in the read-only dictionary.</summary><returns>An enumerable collection that contains the keys in the read-only dictionary.</returns>
        </member>
        <member name="P:Azure.Communication.Chat.ChangeTrackingDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey@TValue}#Values">
            <summary>Gets an enumerable collection that contains the values in the read-only dictionary.</summary><returns>An enumerable collection that contains the values in the read-only dictionary.</returns>
        </member>
        <member name="M:Azure.Communication.Chat.ChangeTrackingDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary><returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Azure.Communication.Chat.ChangeTrackingList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary><returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Azure.Core.Pipeline.TaskExtensions.Enumerable`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary><returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Azure.Core.Pipeline.TaskExtensions.Enumerable`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary><returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="P:Azure.Core.Pipeline.TaskExtensions.Enumerator`1.System#Collections#IEnumerator#Current">
            <summary>Gets the element in the collection at the current position of the enumerator.</summary><returns>The element in the collection at the current position of the enumerator.</returns>
        </member>
    </members>
</doc>
